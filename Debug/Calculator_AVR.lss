
Calculator_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00002c5a  00002cee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800080  00800080  00002d0e  2**0
                  ALLOC
  3 .stab         00002910  00000000  00000000  00002d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013f4  00000000  00000000  00005620  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000890d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000097f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a5a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a708  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a995  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b163  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 39       	cpi	r26, 0x9E	; 158
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <main>
      8a:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_enuInit>:
#include "DIO_interface.h"



ES_t DIO_enuInit()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     b50:	19 82       	std	Y+1, r1	; 0x01

	DDRA=CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
     b52:	ea e3       	ldi	r30, 0x3A	; 58
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	8f ef       	ldi	r24, 0xFF	; 255
     b58:	80 83       	st	Z, r24
	DDRB=CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
     b5a:	e7 e3       	ldi	r30, 0x37	; 55
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	8f ef       	ldi	r24, 0xFF	; 255
     b60:	80 83       	st	Z, r24
	DDRC=CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
     b62:	e4 e3       	ldi	r30, 0x34	; 52
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	8f ef       	ldi	r24, 0xFF	; 255
     b68:	80 83       	st	Z, r24
	DDRD=CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
     b6a:	e1 e3       	ldi	r30, 0x31	; 49
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	8f ef       	ldi	r24, 0xFF	; 255
     b70:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
     b72:	eb e3       	ldi	r30, 0x3B	; 59
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	10 82       	st	Z, r1
	PORTB = CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
     b78:	e8 e3       	ldi	r30, 0x38	; 56
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	10 82       	st	Z, r1
	PORTA = CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
     b7e:	eb e3       	ldi	r30, 0x3B	; 59
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	10 82       	st	Z, r1
	PORTA = CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
     b84:	eb e3       	ldi	r30, 0x3B	; 59
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	10 82       	st	Z, r1
	Local_enuErrorState = ES_OK;
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;
     b8e:	89 81       	ldd	r24, Y+1	; 0x01

}
     b90:	0f 90       	pop	r0
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <DIO_enuSetPortDirection>:


ES_t  DIO_enuSetPortDirection (u8 Copy_u8PortID,u8 Copy_u8PortDirection)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <DIO_enuSetPortDirection+0x6>
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <DIO_enuSetPortDirection+0x8>
     ba0:	0f 92       	push	r0
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	8a 83       	std	Y+2, r24	; 0x02
     ba8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     baa:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD){
     bac:	8a 81       	ldd	r24, Y+2	; 0x02
     bae:	84 30       	cpi	r24, 0x04	; 4
     bb0:	98 f5       	brcc	.+102    	; 0xc18 <DIO_enuSetPortDirection+0x80>
	switch(Copy_u8PortID)
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	3d 83       	std	Y+5, r19	; 0x05
     bba:	2c 83       	std	Y+4, r18	; 0x04
     bbc:	8c 81       	ldd	r24, Y+4	; 0x04
     bbe:	9d 81       	ldd	r25, Y+5	; 0x05
     bc0:	81 30       	cpi	r24, 0x01	; 1
     bc2:	91 05       	cpc	r25, r1
     bc4:	d1 f0       	breq	.+52     	; 0xbfa <DIO_enuSetPortDirection+0x62>
     bc6:	2c 81       	ldd	r18, Y+4	; 0x04
     bc8:	3d 81       	ldd	r19, Y+5	; 0x05
     bca:	22 30       	cpi	r18, 0x02	; 2
     bcc:	31 05       	cpc	r19, r1
     bce:	2c f4       	brge	.+10     	; 0xbda <DIO_enuSetPortDirection+0x42>
     bd0:	8c 81       	ldd	r24, Y+4	; 0x04
     bd2:	9d 81       	ldd	r25, Y+5	; 0x05
     bd4:	00 97       	sbiw	r24, 0x00	; 0
     bd6:	61 f0       	breq	.+24     	; 0xbf0 <DIO_enuSetPortDirection+0x58>
     bd8:	21 c0       	rjmp	.+66     	; 0xc1c <DIO_enuSetPortDirection+0x84>
     bda:	2c 81       	ldd	r18, Y+4	; 0x04
     bdc:	3d 81       	ldd	r19, Y+5	; 0x05
     bde:	22 30       	cpi	r18, 0x02	; 2
     be0:	31 05       	cpc	r19, r1
     be2:	81 f0       	breq	.+32     	; 0xc04 <DIO_enuSetPortDirection+0x6c>
     be4:	8c 81       	ldd	r24, Y+4	; 0x04
     be6:	9d 81       	ldd	r25, Y+5	; 0x05
     be8:	83 30       	cpi	r24, 0x03	; 3
     bea:	91 05       	cpc	r25, r1
     bec:	81 f0       	breq	.+32     	; 0xc0e <DIO_enuSetPortDirection+0x76>
     bee:	16 c0       	rjmp	.+44     	; 0xc1c <DIO_enuSetPortDirection+0x84>
	{
	case(DIO_PORTA):
	{  DDRA=Copy_u8PortDirection;
     bf0:	ea e3       	ldi	r30, 0x3A	; 58
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	8b 81       	ldd	r24, Y+3	; 0x03
     bf6:	80 83       	st	Z, r24
     bf8:	11 c0       	rjmp	.+34     	; 0xc1c <DIO_enuSetPortDirection+0x84>
	   break;
	}
	case(DIO_PORTB):
		{  DDRB=Copy_u8PortDirection;
     bfa:	e7 e3       	ldi	r30, 0x37	; 55
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	80 83       	st	Z, r24
     c02:	0c c0       	rjmp	.+24     	; 0xc1c <DIO_enuSetPortDirection+0x84>
		   break;
		}
	case(DIO_PORTC):
		{  DDRC=Copy_u8PortDirection;
     c04:	e4 e3       	ldi	r30, 0x34	; 52
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	8b 81       	ldd	r24, Y+3	; 0x03
     c0a:	80 83       	st	Z, r24
     c0c:	07 c0       	rjmp	.+14     	; 0xc1c <DIO_enuSetPortDirection+0x84>
		   break;
		}
	case(DIO_PORTD):
		{  DDRD=Copy_u8PortDirection;
     c0e:	e1 e3       	ldi	r30, 0x31	; 49
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	8b 81       	ldd	r24, Y+3	; 0x03
     c14:	80 83       	st	Z, r24
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <DIO_enuSetPortDirection+0x84>
	 Local_enuErrorState=ES_OK;
	}
}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
     c18:	83 e0       	ldi	r24, 0x03	; 3
     c1a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     c1c:	89 81       	ldd	r24, Y+1	; 0x01

}
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	cf 91       	pop	r28
     c2a:	df 91       	pop	r29
     c2c:	08 95       	ret

00000c2e <DIO_enuSetPortValue>:



ES_t DIO_enuSetPortValue (u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
     c2e:	df 93       	push	r29
     c30:	cf 93       	push	r28
     c32:	00 d0       	rcall	.+0      	; 0xc34 <DIO_enuSetPortValue+0x6>
     c34:	00 d0       	rcall	.+0      	; 0xc36 <DIO_enuSetPortValue+0x8>
     c36:	0f 92       	push	r0
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	8a 83       	std	Y+2, r24	; 0x02
     c3e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     c40:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD){
     c42:	8a 81       	ldd	r24, Y+2	; 0x02
     c44:	84 30       	cpi	r24, 0x04	; 4
     c46:	98 f5       	brcc	.+102    	; 0xcae <DIO_enuSetPortValue+0x80>
	switch(Copy_u8PortID)
     c48:	8a 81       	ldd	r24, Y+2	; 0x02
     c4a:	28 2f       	mov	r18, r24
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	3d 83       	std	Y+5, r19	; 0x05
     c50:	2c 83       	std	Y+4, r18	; 0x04
     c52:	8c 81       	ldd	r24, Y+4	; 0x04
     c54:	9d 81       	ldd	r25, Y+5	; 0x05
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	91 05       	cpc	r25, r1
     c5a:	d1 f0       	breq	.+52     	; 0xc90 <DIO_enuSetPortValue+0x62>
     c5c:	2c 81       	ldd	r18, Y+4	; 0x04
     c5e:	3d 81       	ldd	r19, Y+5	; 0x05
     c60:	22 30       	cpi	r18, 0x02	; 2
     c62:	31 05       	cpc	r19, r1
     c64:	2c f4       	brge	.+10     	; 0xc70 <DIO_enuSetPortValue+0x42>
     c66:	8c 81       	ldd	r24, Y+4	; 0x04
     c68:	9d 81       	ldd	r25, Y+5	; 0x05
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	61 f0       	breq	.+24     	; 0xc86 <DIO_enuSetPortValue+0x58>
     c6e:	21 c0       	rjmp	.+66     	; 0xcb2 <DIO_enuSetPortValue+0x84>
     c70:	2c 81       	ldd	r18, Y+4	; 0x04
     c72:	3d 81       	ldd	r19, Y+5	; 0x05
     c74:	22 30       	cpi	r18, 0x02	; 2
     c76:	31 05       	cpc	r19, r1
     c78:	81 f0       	breq	.+32     	; 0xc9a <DIO_enuSetPortValue+0x6c>
     c7a:	8c 81       	ldd	r24, Y+4	; 0x04
     c7c:	9d 81       	ldd	r25, Y+5	; 0x05
     c7e:	83 30       	cpi	r24, 0x03	; 3
     c80:	91 05       	cpc	r25, r1
     c82:	81 f0       	breq	.+32     	; 0xca4 <DIO_enuSetPortValue+0x76>
     c84:	16 c0       	rjmp	.+44     	; 0xcb2 <DIO_enuSetPortValue+0x84>
		{
		case(DIO_PORTA):
		{  PORTA=Copy_u8PortValue;
     c86:	eb e3       	ldi	r30, 0x3B	; 59
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	8b 81       	ldd	r24, Y+3	; 0x03
     c8c:	80 83       	st	Z, r24
     c8e:	11 c0       	rjmp	.+34     	; 0xcb2 <DIO_enuSetPortValue+0x84>
		   break;
		}
		case(DIO_PORTB):
			{  PORTB=Copy_u8PortValue;
     c90:	e8 e3       	ldi	r30, 0x38	; 56
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	80 83       	st	Z, r24
     c98:	0c c0       	rjmp	.+24     	; 0xcb2 <DIO_enuSetPortValue+0x84>
			   break;
			}
		case(DIO_PORTC):
			{  PORTC=Copy_u8PortValue;
     c9a:	e5 e3       	ldi	r30, 0x35	; 53
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	80 83       	st	Z, r24
     ca2:	07 c0       	rjmp	.+14     	; 0xcb2 <DIO_enuSetPortValue+0x84>
			   break;
			}
		case(DIO_PORTD):
			{  PORTD=Copy_u8PortValue;
     ca4:	e2 e3       	ldi	r30, 0x32	; 50
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	80 83       	st	Z, r24
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <DIO_enuSetPortValue+0x84>
		 Local_enuErrorState=ES_OK;
		}
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
     cae:	83 e0       	ldi	r24, 0x03	; 3
     cb0:	89 83       	std	Y+1, r24	; 0x01
	}
		return Local_enuErrorState;
     cb2:	89 81       	ldd	r24, Y+1	; 0x01

}
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <DIO_enuTogPort>:




ES_t DIO_enuTogPort (u8 Copy_u8PortID)
{
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	00 d0       	rcall	.+0      	; 0xcca <DIO_enuTogPort+0x6>
     cca:	00 d0       	rcall	.+0      	; 0xccc <DIO_enuTogPort+0x8>
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     cd2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD){
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	84 30       	cpi	r24, 0x04	; 4
     cd8:	08 f0       	brcs	.+2      	; 0xcdc <DIO_enuTogPort+0x18>
     cda:	3f c0       	rjmp	.+126    	; 0xd5a <DIO_enuTogPort+0x96>
	switch(Copy_u8PortID)
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	28 2f       	mov	r18, r24
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	3c 83       	std	Y+4, r19	; 0x04
     ce4:	2b 83       	std	Y+3, r18	; 0x03
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	9c 81       	ldd	r25, Y+4	; 0x04
     cea:	81 30       	cpi	r24, 0x01	; 1
     cec:	91 05       	cpc	r25, r1
     cee:	e9 f0       	breq	.+58     	; 0xd2a <DIO_enuTogPort+0x66>
     cf0:	2b 81       	ldd	r18, Y+3	; 0x03
     cf2:	3c 81       	ldd	r19, Y+4	; 0x04
     cf4:	22 30       	cpi	r18, 0x02	; 2
     cf6:	31 05       	cpc	r19, r1
     cf8:	2c f4       	brge	.+10     	; 0xd04 <DIO_enuTogPort+0x40>
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	9c 81       	ldd	r25, Y+4	; 0x04
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	61 f0       	breq	.+24     	; 0xd1a <DIO_enuTogPort+0x56>
     d02:	2d c0       	rjmp	.+90     	; 0xd5e <DIO_enuTogPort+0x9a>
     d04:	2b 81       	ldd	r18, Y+3	; 0x03
     d06:	3c 81       	ldd	r19, Y+4	; 0x04
     d08:	22 30       	cpi	r18, 0x02	; 2
     d0a:	31 05       	cpc	r19, r1
     d0c:	b1 f0       	breq	.+44     	; 0xd3a <DIO_enuTogPort+0x76>
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	9c 81       	ldd	r25, Y+4	; 0x04
     d12:	83 30       	cpi	r24, 0x03	; 3
     d14:	91 05       	cpc	r25, r1
     d16:	c9 f0       	breq	.+50     	; 0xd4a <DIO_enuTogPort+0x86>
     d18:	22 c0       	rjmp	.+68     	; 0xd5e <DIO_enuTogPort+0x9a>
			{
			case(DIO_PORTA):
			{  PORTA =~ PORTA;
     d1a:	ab e3       	ldi	r26, 0x3B	; 59
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	eb e3       	ldi	r30, 0x3B	; 59
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	80 95       	com	r24
     d26:	8c 93       	st	X, r24
     d28:	1a c0       	rjmp	.+52     	; 0xd5e <DIO_enuTogPort+0x9a>
			   break;
			}
			case(DIO_PORTB):
				{  PORTB = ~PORTB;
     d2a:	a8 e3       	ldi	r26, 0x38	; 56
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e8 e3       	ldi	r30, 0x38	; 56
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	80 95       	com	r24
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <DIO_enuTogPort+0x9a>
				   break;
				}
			case(DIO_PORTC):
				{  PORTC = ~PORTC;
     d3a:	a5 e3       	ldi	r26, 0x35	; 53
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e5 e3       	ldi	r30, 0x35	; 53
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	80 95       	com	r24
     d46:	8c 93       	st	X, r24
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <DIO_enuTogPort+0x9a>
				   break;
				}
			case(DIO_PORTD):
				{  PORTD = ~PORTD;
     d4a:	a2 e3       	ldi	r26, 0x32	; 50
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e2 e3       	ldi	r30, 0x32	; 50
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	80 95       	com	r24
     d56:	8c 93       	st	X, r24
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <DIO_enuTogPort+0x9a>
			 Local_enuErrorState=ES_OK;
			}
}
		else
		{
			Local_enuErrorState=ES_OUT_OF_RANGE;
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	89 83       	std	Y+1, r24	; 0x01
		}
			return Local_enuErrorState;
     d5e:	89 81       	ldd	r24, Y+1	; 0x01


}
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <DIO_enuGetPortValue>:




ES_t DIO_enuGetPortValue (u8 Copy_u8PortID, u8 *Copy_pu8PortValue)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <DIO_enuGetPortValue+0x6>
     d74:	00 d0       	rcall	.+0      	; 0xd76 <DIO_enuGetPortValue+0x8>
     d76:	00 d0       	rcall	.+0      	; 0xd78 <DIO_enuGetPortValue+0xa>
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	8a 83       	std	Y+2, r24	; 0x02
     d7e:	7c 83       	std	Y+4, r23	; 0x04
     d80:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     d82:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8PortValue != NULL)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	9c 81       	ldd	r25, Y+4	; 0x04
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	09 f4       	brne	.+2      	; 0xd8e <DIO_enuGetPortValue+0x20>
     d8c:	41 c0       	rjmp	.+130    	; 0xe10 <DIO_enuGetPortValue+0xa2>
	{
		if(Copy_u8PortID <= DIO_PORTD){
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	84 30       	cpi	r24, 0x04	; 4
     d92:	d8 f5       	brcc	.+118    	; 0xe0a <DIO_enuGetPortValue+0x9c>
			switch(Copy_u8PortID)
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	3e 83       	std	Y+6, r19	; 0x06
     d9c:	2d 83       	std	Y+5, r18	; 0x05
     d9e:	8d 81       	ldd	r24, Y+5	; 0x05
     da0:	9e 81       	ldd	r25, Y+6	; 0x06
     da2:	81 30       	cpi	r24, 0x01	; 1
     da4:	91 05       	cpc	r25, r1
     da6:	e1 f0       	breq	.+56     	; 0xde0 <DIO_enuGetPortValue+0x72>
     da8:	2d 81       	ldd	r18, Y+5	; 0x05
     daa:	3e 81       	ldd	r19, Y+6	; 0x06
     dac:	22 30       	cpi	r18, 0x02	; 2
     dae:	31 05       	cpc	r19, r1
     db0:	2c f4       	brge	.+10     	; 0xdbc <DIO_enuGetPortValue+0x4e>
     db2:	8d 81       	ldd	r24, Y+5	; 0x05
     db4:	9e 81       	ldd	r25, Y+6	; 0x06
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	61 f0       	breq	.+24     	; 0xdd2 <DIO_enuGetPortValue+0x64>
     dba:	2c c0       	rjmp	.+88     	; 0xe14 <DIO_enuGetPortValue+0xa6>
     dbc:	2d 81       	ldd	r18, Y+5	; 0x05
     dbe:	3e 81       	ldd	r19, Y+6	; 0x06
     dc0:	22 30       	cpi	r18, 0x02	; 2
     dc2:	31 05       	cpc	r19, r1
     dc4:	a1 f0       	breq	.+40     	; 0xdee <DIO_enuGetPortValue+0x80>
     dc6:	8d 81       	ldd	r24, Y+5	; 0x05
     dc8:	9e 81       	ldd	r25, Y+6	; 0x06
     dca:	83 30       	cpi	r24, 0x03	; 3
     dcc:	91 05       	cpc	r25, r1
     dce:	b1 f0       	breq	.+44     	; 0xdfc <DIO_enuGetPortValue+0x8e>
     dd0:	21 c0       	rjmp	.+66     	; 0xe14 <DIO_enuGetPortValue+0xa6>
					{
					case(DIO_PORTA):
					{
						*Copy_pu8PortValue=PINA;
     dd2:	e9 e3       	ldi	r30, 0x39	; 57
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	eb 81       	ldd	r30, Y+3	; 0x03
     dda:	fc 81       	ldd	r31, Y+4	; 0x04
     ddc:	80 83       	st	Z, r24
     dde:	1a c0       	rjmp	.+52     	; 0xe14 <DIO_enuGetPortValue+0xa6>
					   break;
					}
					case(DIO_PORTB):
					{
					  	*Copy_pu8PortValue=PINB;
     de0:	e6 e3       	ldi	r30, 0x36	; 54
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	eb 81       	ldd	r30, Y+3	; 0x03
     de8:	fc 81       	ldd	r31, Y+4	; 0x04
     dea:	80 83       	st	Z, r24
     dec:	13 c0       	rjmp	.+38     	; 0xe14 <DIO_enuGetPortValue+0xa6>
						   break;
					}
					case(DIO_PORTC):
					{
						*Copy_pu8PortValue=PINC;
     dee:	e3 e3       	ldi	r30, 0x33	; 51
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	eb 81       	ldd	r30, Y+3	; 0x03
     df6:	fc 81       	ldd	r31, Y+4	; 0x04
     df8:	80 83       	st	Z, r24
     dfa:	0c c0       	rjmp	.+24     	; 0xe14 <DIO_enuGetPortValue+0xa6>
						   break;
					}
					case(DIO_PORTD):
					{
						*Copy_pu8PortValue=PIND;
     dfc:	e0 e3       	ldi	r30, 0x30	; 48
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	eb 81       	ldd	r30, Y+3	; 0x03
     e04:	fc 81       	ldd	r31, Y+4	; 0x04
     e06:	80 83       	st	Z, r24
     e08:	05 c0       	rjmp	.+10     	; 0xe14 <DIO_enuGetPortValue+0xa6>
					 Local_enuErrorState=ES_OK;
					}
		                               }
				else
				{
					Local_enuErrorState=ES_OUT_OF_RANGE;
     e0a:	83 e0       	ldi	r24, 0x03	; 3
     e0c:	89 83       	std	Y+1, r24	; 0x01
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_enuGetPortValue+0xa6>
				}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     e14:	89 81       	ldd	r24, Y+1	; 0x01
}
     e16:	26 96       	adiw	r28, 0x06	; 6
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	cd bf       	out	0x3d, r28	; 61
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <DIO_enuSetPinDirection>:




ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8PinDirection)
{
     e28:	df 93       	push	r29
     e2a:	cf 93       	push	r28
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <DIO_enuSetPinDirection+0x6>
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <DIO_enuSetPinDirection+0x8>
     e30:	00 d0       	rcall	.+0      	; 0xe32 <DIO_enuSetPinDirection+0xa>
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	8a 83       	std	Y+2, r24	; 0x02
     e38:	6b 83       	std	Y+3, r22	; 0x03
     e3a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     e3c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8PinDirection <= BIT_MASK){
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	84 30       	cpi	r24, 0x04	; 4
     e42:	08 f0       	brcs	.+2      	; 0xe46 <DIO_enuSetPinDirection+0x1e>
     e44:	cf c0       	rjmp	.+414    	; 0xfe4 <DIO_enuSetPinDirection+0x1bc>
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	88 30       	cpi	r24, 0x08	; 8
     e4a:	08 f0       	brcs	.+2      	; 0xe4e <DIO_enuSetPinDirection+0x26>
     e4c:	cb c0       	rjmp	.+406    	; 0xfe4 <DIO_enuSetPinDirection+0x1bc>
     e4e:	8c 81       	ldd	r24, Y+4	; 0x04
     e50:	82 30       	cpi	r24, 0x02	; 2
     e52:	08 f0       	brcs	.+2      	; 0xe56 <DIO_enuSetPinDirection+0x2e>
     e54:	c7 c0       	rjmp	.+398    	; 0xfe4 <DIO_enuSetPinDirection+0x1bc>
		switch(Copy_u8PortID)
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	3e 83       	std	Y+6, r19	; 0x06
     e5e:	2d 83       	std	Y+5, r18	; 0x05
     e60:	6d 81       	ldd	r22, Y+5	; 0x05
     e62:	7e 81       	ldd	r23, Y+6	; 0x06
     e64:	61 30       	cpi	r22, 0x01	; 1
     e66:	71 05       	cpc	r23, r1
     e68:	09 f4       	brne	.+2      	; 0xe6c <DIO_enuSetPinDirection+0x44>
     e6a:	41 c0       	rjmp	.+130    	; 0xeee <DIO_enuSetPinDirection+0xc6>
     e6c:	8d 81       	ldd	r24, Y+5	; 0x05
     e6e:	9e 81       	ldd	r25, Y+6	; 0x06
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	91 05       	cpc	r25, r1
     e74:	34 f4       	brge	.+12     	; 0xe82 <DIO_enuSetPinDirection+0x5a>
     e76:	2d 81       	ldd	r18, Y+5	; 0x05
     e78:	3e 81       	ldd	r19, Y+6	; 0x06
     e7a:	21 15       	cp	r18, r1
     e7c:	31 05       	cpc	r19, r1
     e7e:	71 f0       	breq	.+28     	; 0xe9c <DIO_enuSetPinDirection+0x74>
     e80:	b3 c0       	rjmp	.+358    	; 0xfe8 <DIO_enuSetPinDirection+0x1c0>
     e82:	6d 81       	ldd	r22, Y+5	; 0x05
     e84:	7e 81       	ldd	r23, Y+6	; 0x06
     e86:	62 30       	cpi	r22, 0x02	; 2
     e88:	71 05       	cpc	r23, r1
     e8a:	09 f4       	brne	.+2      	; 0xe8e <DIO_enuSetPinDirection+0x66>
     e8c:	59 c0       	rjmp	.+178    	; 0xf40 <DIO_enuSetPinDirection+0x118>
     e8e:	8d 81       	ldd	r24, Y+5	; 0x05
     e90:	9e 81       	ldd	r25, Y+6	; 0x06
     e92:	83 30       	cpi	r24, 0x03	; 3
     e94:	91 05       	cpc	r25, r1
     e96:	09 f4       	brne	.+2      	; 0xe9a <DIO_enuSetPinDirection+0x72>
     e98:	7c c0       	rjmp	.+248    	; 0xf92 <DIO_enuSetPinDirection+0x16a>
     e9a:	a6 c0       	rjmp	.+332    	; 0xfe8 <DIO_enuSetPinDirection+0x1c0>
				{
				case(DIO_PORTA):
				{  DDRA &= ~(BIT_MASK<< Copy_u8PinID);
     e9c:	aa e3       	ldi	r26, 0x3A	; 58
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	ea e3       	ldi	r30, 0x3A	; 58
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	48 2f       	mov	r20, r24
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <DIO_enuSetPinDirection+0x90>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	2a 95       	dec	r18
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <DIO_enuSetPinDirection+0x8c>
     ebc:	80 95       	com	r24
     ebe:	84 23       	and	r24, r20
     ec0:	8c 93       	st	X, r24
				   DDRA |= (Copy_u8PinDirection<< Copy_u8PinID);
     ec2:	aa e3       	ldi	r26, 0x3A	; 58
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	ea e3       	ldi	r30, 0x3A	; 58
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	48 2f       	mov	r20, r24
     ece:	8c 81       	ldd	r24, Y+4	; 0x04
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	88 2f       	mov	r24, r24
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	b9 01       	movw	r22, r18
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <DIO_enuSetPinDirection+0xba>
     ede:	66 0f       	add	r22, r22
     ee0:	77 1f       	adc	r23, r23
     ee2:	8a 95       	dec	r24
     ee4:	e2 f7       	brpl	.-8      	; 0xede <DIO_enuSetPinDirection+0xb6>
     ee6:	cb 01       	movw	r24, r22
     ee8:	84 2b       	or	r24, r20
     eea:	8c 93       	st	X, r24
     eec:	7d c0       	rjmp	.+250    	; 0xfe8 <DIO_enuSetPinDirection+0x1c0>
				   break;
				}
				case(DIO_PORTB):
					{  DDRB &= ~(BIT_MASK<< Copy_u8PinID);
     eee:	a7 e3       	ldi	r26, 0x37	; 55
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e7 e3       	ldi	r30, 0x37	; 55
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <DIO_enuSetPinDirection+0xe2>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	2a 95       	dec	r18
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <DIO_enuSetPinDirection+0xde>
     f0e:	80 95       	com	r24
     f10:	84 23       	and	r24, r20
     f12:	8c 93       	st	X, r24
					   DDRB |= (Copy_u8PinDirection<< Copy_u8PinID);
     f14:	a7 e3       	ldi	r26, 0x37	; 55
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e7 e3       	ldi	r30, 0x37	; 55
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	48 2f       	mov	r20, r24
     f20:	8c 81       	ldd	r24, Y+4	; 0x04
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	88 2f       	mov	r24, r24
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	b9 01       	movw	r22, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_enuSetPinDirection+0x10c>
     f30:	66 0f       	add	r22, r22
     f32:	77 1f       	adc	r23, r23
     f34:	8a 95       	dec	r24
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_enuSetPinDirection+0x108>
     f38:	cb 01       	movw	r24, r22
     f3a:	84 2b       	or	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	54 c0       	rjmp	.+168    	; 0xfe8 <DIO_enuSetPinDirection+0x1c0>
					   break;
					}
				case(DIO_PORTC):
					{  DDRC &= ~(BIT_MASK<<Copy_u8PinID);
     f40:	a4 e3       	ldi	r26, 0x34	; 52
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e4 e3       	ldi	r30, 0x34	; 52
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <DIO_enuSetPinDirection+0x134>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	2a 95       	dec	r18
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <DIO_enuSetPinDirection+0x130>
     f60:	80 95       	com	r24
     f62:	84 23       	and	r24, r20
     f64:	8c 93       	st	X, r24
					   DDRC |= (Copy_u8PinDirection << Copy_u8PinID);
     f66:	a4 e3       	ldi	r26, 0x34	; 52
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e4 e3       	ldi	r30, 0x34	; 52
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8c 81       	ldd	r24, Y+4	; 0x04
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	88 2f       	mov	r24, r24
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	b9 01       	movw	r22, r18
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <DIO_enuSetPinDirection+0x15e>
     f82:	66 0f       	add	r22, r22
     f84:	77 1f       	adc	r23, r23
     f86:	8a 95       	dec	r24
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <DIO_enuSetPinDirection+0x15a>
     f8a:	cb 01       	movw	r24, r22
     f8c:	84 2b       	or	r24, r20
     f8e:	8c 93       	st	X, r24
     f90:	2b c0       	rjmp	.+86     	; 0xfe8 <DIO_enuSetPinDirection+0x1c0>
					   break;
					}
				case(DIO_PORTD):
					{  DDRD &= ~(BIT_MASK<< Copy_u8PinID);
     f92:	a1 e3       	ldi	r26, 0x31	; 49
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e1 e3       	ldi	r30, 0x31	; 49
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	48 2f       	mov	r20, r24
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <DIO_enuSetPinDirection+0x186>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	2a 95       	dec	r18
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <DIO_enuSetPinDirection+0x182>
     fb2:	80 95       	com	r24
     fb4:	84 23       	and	r24, r20
     fb6:	8c 93       	st	X, r24
					   DDRD |= (Copy_u8PinDirection<< Copy_u8PinID);
     fb8:	a1 e3       	ldi	r26, 0x31	; 49
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e1 e3       	ldi	r30, 0x31	; 49
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	8c 81       	ldd	r24, Y+4	; 0x04
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	88 2f       	mov	r24, r24
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	b9 01       	movw	r22, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <DIO_enuSetPinDirection+0x1b0>
     fd4:	66 0f       	add	r22, r22
     fd6:	77 1f       	adc	r23, r23
     fd8:	8a 95       	dec	r24
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <DIO_enuSetPinDirection+0x1ac>
     fdc:	cb 01       	movw	r24, r22
     fde:	84 2b       	or	r24, r20
     fe0:	8c 93       	st	X, r24
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <DIO_enuSetPinDirection+0x1c0>
				 Local_enuErrorState=ES_OK;
				}
	}
			else
			{
				Local_enuErrorState=ES_OUT_OF_RANGE;
     fe4:	83 e0       	ldi	r24, 0x03	; 3
     fe6:	89 83       	std	Y+1, r24	; 0x01
			}
				return Local_enuErrorState;
     fe8:	89 81       	ldd	r24, Y+1	; 0x01

}
     fea:	26 96       	adiw	r28, 0x06	; 6
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	08 95       	ret

00000ffc <DIO_enuSetPinValue>:




ES_t DIO_enuSetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8PinValue)
{
     ffc:	df 93       	push	r29
     ffe:	cf 93       	push	r28
    1000:	00 d0       	rcall	.+0      	; 0x1002 <DIO_enuSetPinValue+0x6>
    1002:	00 d0       	rcall	.+0      	; 0x1004 <DIO_enuSetPinValue+0x8>
    1004:	00 d0       	rcall	.+0      	; 0x1006 <DIO_enuSetPinValue+0xa>
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	8a 83       	std	Y+2, r24	; 0x02
    100c:	6b 83       	std	Y+3, r22	; 0x03
    100e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1010:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8PinValue <= 1){
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	84 30       	cpi	r24, 0x04	; 4
    1016:	08 f0       	brcs	.+2      	; 0x101a <DIO_enuSetPinValue+0x1e>
    1018:	cf c0       	rjmp	.+414    	; 0x11b8 <DIO_enuSetPinValue+0x1bc>
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	88 30       	cpi	r24, 0x08	; 8
    101e:	08 f0       	brcs	.+2      	; 0x1022 <DIO_enuSetPinValue+0x26>
    1020:	cb c0       	rjmp	.+406    	; 0x11b8 <DIO_enuSetPinValue+0x1bc>
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	82 30       	cpi	r24, 0x02	; 2
    1026:	08 f0       	brcs	.+2      	; 0x102a <DIO_enuSetPinValue+0x2e>
    1028:	c7 c0       	rjmp	.+398    	; 0x11b8 <DIO_enuSetPinValue+0x1bc>
			switch(Copy_u8PortID)
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	3e 83       	std	Y+6, r19	; 0x06
    1032:	2d 83       	std	Y+5, r18	; 0x05
    1034:	6d 81       	ldd	r22, Y+5	; 0x05
    1036:	7e 81       	ldd	r23, Y+6	; 0x06
    1038:	61 30       	cpi	r22, 0x01	; 1
    103a:	71 05       	cpc	r23, r1
    103c:	09 f4       	brne	.+2      	; 0x1040 <DIO_enuSetPinValue+0x44>
    103e:	41 c0       	rjmp	.+130    	; 0x10c2 <DIO_enuSetPinValue+0xc6>
    1040:	8d 81       	ldd	r24, Y+5	; 0x05
    1042:	9e 81       	ldd	r25, Y+6	; 0x06
    1044:	82 30       	cpi	r24, 0x02	; 2
    1046:	91 05       	cpc	r25, r1
    1048:	34 f4       	brge	.+12     	; 0x1056 <DIO_enuSetPinValue+0x5a>
    104a:	2d 81       	ldd	r18, Y+5	; 0x05
    104c:	3e 81       	ldd	r19, Y+6	; 0x06
    104e:	21 15       	cp	r18, r1
    1050:	31 05       	cpc	r19, r1
    1052:	71 f0       	breq	.+28     	; 0x1070 <DIO_enuSetPinValue+0x74>
    1054:	b3 c0       	rjmp	.+358    	; 0x11bc <DIO_enuSetPinValue+0x1c0>
    1056:	6d 81       	ldd	r22, Y+5	; 0x05
    1058:	7e 81       	ldd	r23, Y+6	; 0x06
    105a:	62 30       	cpi	r22, 0x02	; 2
    105c:	71 05       	cpc	r23, r1
    105e:	09 f4       	brne	.+2      	; 0x1062 <DIO_enuSetPinValue+0x66>
    1060:	59 c0       	rjmp	.+178    	; 0x1114 <DIO_enuSetPinValue+0x118>
    1062:	8d 81       	ldd	r24, Y+5	; 0x05
    1064:	9e 81       	ldd	r25, Y+6	; 0x06
    1066:	83 30       	cpi	r24, 0x03	; 3
    1068:	91 05       	cpc	r25, r1
    106a:	09 f4       	brne	.+2      	; 0x106e <DIO_enuSetPinValue+0x72>
    106c:	7c c0       	rjmp	.+248    	; 0x1166 <DIO_enuSetPinValue+0x16a>
    106e:	a6 c0       	rjmp	.+332    	; 0x11bc <DIO_enuSetPinValue+0x1c0>
					{
					case(DIO_PORTA):
					    {  PORTA &= ~(BIT_MASK<< Copy_u8PinID);
    1070:	ab e3       	ldi	r26, 0x3B	; 59
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	eb e3       	ldi	r30, 0x3B	; 59
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 c0       	rjmp	.+4      	; 0x108c <DIO_enuSetPinValue+0x90>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	2a 95       	dec	r18
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <DIO_enuSetPinValue+0x8c>
    1090:	80 95       	com	r24
    1092:	84 23       	and	r24, r20
    1094:	8c 93       	st	X, r24
					   	   PORTA |= (Copy_u8PinValue <<Copy_u8PinID);
    1096:	ab e3       	ldi	r26, 0x3B	; 59
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	eb e3       	ldi	r30, 0x3B	; 59
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8c 81       	ldd	r24, Y+4	; 0x04
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	b9 01       	movw	r22, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <DIO_enuSetPinValue+0xba>
    10b2:	66 0f       	add	r22, r22
    10b4:	77 1f       	adc	r23, r23
    10b6:	8a 95       	dec	r24
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <DIO_enuSetPinValue+0xb6>
    10ba:	cb 01       	movw	r24, r22
    10bc:	84 2b       	or	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	7d c0       	rjmp	.+250    	; 0x11bc <DIO_enuSetPinValue+0x1c0>
					   	   break;
					    }
					case(DIO_PORTB):
						{  PORTB &= ~(BIT_MASK<<Copy_u8PinID);
    10c2:	a8 e3       	ldi	r26, 0x38	; 56
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e8 e3       	ldi	r30, 0x38	; 56
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <DIO_enuSetPinValue+0xe2>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	2a 95       	dec	r18
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <DIO_enuSetPinValue+0xde>
    10e2:	80 95       	com	r24
    10e4:	84 23       	and	r24, r20
    10e6:	8c 93       	st	X, r24
						   PORTB |= (Copy_u8PinValue<< Copy_u8PinID);
    10e8:	a8 e3       	ldi	r26, 0x38	; 56
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e8 e3       	ldi	r30, 0x38	; 56
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8c 81       	ldd	r24, Y+4	; 0x04
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	b9 01       	movw	r22, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <DIO_enuSetPinValue+0x10c>
    1104:	66 0f       	add	r22, r22
    1106:	77 1f       	adc	r23, r23
    1108:	8a 95       	dec	r24
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <DIO_enuSetPinValue+0x108>
    110c:	cb 01       	movw	r24, r22
    110e:	84 2b       	or	r24, r20
    1110:	8c 93       	st	X, r24
    1112:	54 c0       	rjmp	.+168    	; 0x11bc <DIO_enuSetPinValue+0x1c0>
						   break;
						}
					case(DIO_PORTC):
						{  PORTC &= ~(BIT_MASK<< Copy_u8PinID);
    1114:	a5 e3       	ldi	r26, 0x35	; 53
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_enuSetPinValue+0x134>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	2a 95       	dec	r18
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_enuSetPinValue+0x130>
    1134:	80 95       	com	r24
    1136:	84 23       	and	r24, r20
    1138:	8c 93       	st	X, r24
						   PORTC |= (Copy_u8PinValue<< Copy_u8PinID);
    113a:	a5 e3       	ldi	r26, 0x35	; 53
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e5 e3       	ldi	r30, 0x35	; 53
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	8c 81       	ldd	r24, Y+4	; 0x04
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	88 2f       	mov	r24, r24
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	b9 01       	movw	r22, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <DIO_enuSetPinValue+0x15e>
    1156:	66 0f       	add	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	8a 95       	dec	r24
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <DIO_enuSetPinValue+0x15a>
    115e:	cb 01       	movw	r24, r22
    1160:	84 2b       	or	r24, r20
    1162:	8c 93       	st	X, r24
    1164:	2b c0       	rjmp	.+86     	; 0x11bc <DIO_enuSetPinValue+0x1c0>
						   break;
						}
					case(DIO_PORTD):
						{  PORTD &= ~(BIT_MASK<< Copy_u8PinID);
    1166:	a2 e3       	ldi	r26, 0x32	; 50
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e2 e3       	ldi	r30, 0x32	; 50
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	48 2f       	mov	r20, r24
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <DIO_enuSetPinValue+0x186>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	2a 95       	dec	r18
    1184:	e2 f7       	brpl	.-8      	; 0x117e <DIO_enuSetPinValue+0x182>
    1186:	80 95       	com	r24
    1188:	84 23       	and	r24, r20
    118a:	8c 93       	st	X, r24
						   PORTD |= (Copy_u8PinValue<< Copy_u8PinID);
    118c:	a2 e3       	ldi	r26, 0x32	; 50
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e2 e3       	ldi	r30, 0x32	; 50
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8c 81       	ldd	r24, Y+4	; 0x04
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	88 2f       	mov	r24, r24
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	b9 01       	movw	r22, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <DIO_enuSetPinValue+0x1b0>
    11a8:	66 0f       	add	r22, r22
    11aa:	77 1f       	adc	r23, r23
    11ac:	8a 95       	dec	r24
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <DIO_enuSetPinValue+0x1ac>
    11b0:	cb 01       	movw	r24, r22
    11b2:	84 2b       	or	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <DIO_enuSetPinValue+0x1c0>
					 Local_enuErrorState=ES_OK;
					}
		}
				else
				{
					Local_enuErrorState=ES_OUT_OF_RANGE;
    11b8:	83 e0       	ldi	r24, 0x03	; 3
    11ba:	89 83       	std	Y+1, r24	; 0x01
				}
					return Local_enuErrorState;
    11bc:	89 81       	ldd	r24, Y+1	; 0x01


}
    11be:	26 96       	adiw	r28, 0x06	; 6
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <DIO_enuTogPin>:



ES_t DIO_enuTogPin (u8 Copy_u8PortID , u8 Copy_u8PinID)
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <DIO_enuTogPin+0x6>
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <DIO_enuTogPin+0x8>
    11d8:	0f 92       	push	r0
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	8a 83       	std	Y+2, r24	; 0x02
    11e0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    11e2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID<=DIO_PORTD && Copy_u8PinID<=DIO_PIN7 ){
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	84 30       	cpi	r24, 0x04	; 4
    11e8:	08 f0       	brcs	.+2      	; 0x11ec <DIO_enuTogPin+0x1c>
    11ea:	73 c0       	rjmp	.+230    	; 0x12d2 <DIO_enuTogPin+0x102>
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	88 30       	cpi	r24, 0x08	; 8
    11f0:	08 f0       	brcs	.+2      	; 0x11f4 <DIO_enuTogPin+0x24>
    11f2:	6f c0       	rjmp	.+222    	; 0x12d2 <DIO_enuTogPin+0x102>
				switch(Copy_u8PortID)
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	3d 83       	std	Y+5, r19	; 0x05
    11fc:	2c 83       	std	Y+4, r18	; 0x04
    11fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1200:	9d 81       	ldd	r25, Y+5	; 0x05
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	91 05       	cpc	r25, r1
    1206:	49 f1       	breq	.+82     	; 0x125a <DIO_enuTogPin+0x8a>
    1208:	2c 81       	ldd	r18, Y+4	; 0x04
    120a:	3d 81       	ldd	r19, Y+5	; 0x05
    120c:	22 30       	cpi	r18, 0x02	; 2
    120e:	31 05       	cpc	r19, r1
    1210:	2c f4       	brge	.+10     	; 0x121c <DIO_enuTogPin+0x4c>
    1212:	8c 81       	ldd	r24, Y+4	; 0x04
    1214:	9d 81       	ldd	r25, Y+5	; 0x05
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	61 f0       	breq	.+24     	; 0x1232 <DIO_enuTogPin+0x62>
    121a:	5d c0       	rjmp	.+186    	; 0x12d6 <DIO_enuTogPin+0x106>
    121c:	2c 81       	ldd	r18, Y+4	; 0x04
    121e:	3d 81       	ldd	r19, Y+5	; 0x05
    1220:	22 30       	cpi	r18, 0x02	; 2
    1222:	31 05       	cpc	r19, r1
    1224:	71 f1       	breq	.+92     	; 0x1282 <DIO_enuTogPin+0xb2>
    1226:	8c 81       	ldd	r24, Y+4	; 0x04
    1228:	9d 81       	ldd	r25, Y+5	; 0x05
    122a:	83 30       	cpi	r24, 0x03	; 3
    122c:	91 05       	cpc	r25, r1
    122e:	e9 f1       	breq	.+122    	; 0x12aa <DIO_enuTogPin+0xda>
    1230:	52 c0       	rjmp	.+164    	; 0x12d6 <DIO_enuTogPin+0x106>
						{
						case(DIO_PORTA):
						{  PORTA ^= (BIT_MASK<< Copy_u8PinID);
    1232:	ab e3       	ldi	r26, 0x3B	; 59
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	eb e3       	ldi	r30, 0x3B	; 59
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	48 2f       	mov	r20, r24
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 2e       	mov	r0, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <DIO_enuTogPin+0x80>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <DIO_enuTogPin+0x7c>
    1254:	84 27       	eor	r24, r20
    1256:	8c 93       	st	X, r24
    1258:	3e c0       	rjmp	.+124    	; 0x12d6 <DIO_enuTogPin+0x106>

						   break;
						}
						case(DIO_PORTB):
							{  PORTB ^= (BIT_MASK<< Copy_u8PinID);
    125a:	a8 e3       	ldi	r26, 0x38	; 56
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e8 e3       	ldi	r30, 0x38	; 56
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	48 2f       	mov	r20, r24
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 2e       	mov	r0, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <DIO_enuTogPin+0xa8>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <DIO_enuTogPin+0xa4>
    127c:	84 27       	eor	r24, r20
    127e:	8c 93       	st	X, r24
    1280:	2a c0       	rjmp	.+84     	; 0x12d6 <DIO_enuTogPin+0x106>

							   break;
							}
						case(DIO_PORTC):
							{  PORTC ^= (BIT_MASK<< Copy_u8PinID);
    1282:	a5 e3       	ldi	r26, 0x35	; 53
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e5 e3       	ldi	r30, 0x35	; 53
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	48 2f       	mov	r20, r24
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 2e       	mov	r0, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <DIO_enuTogPin+0xd0>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	0a 94       	dec	r0
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <DIO_enuTogPin+0xcc>
    12a4:	84 27       	eor	r24, r20
    12a6:	8c 93       	st	X, r24
    12a8:	16 c0       	rjmp	.+44     	; 0x12d6 <DIO_enuTogPin+0x106>

							   break;
							}
						case(DIO_PORTD):
							{  PORTD ^= (BIT_MASK<< Copy_u8PinID);
    12aa:	a2 e3       	ldi	r26, 0x32	; 50
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e2 e3       	ldi	r30, 0x32	; 50
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	48 2f       	mov	r20, r24
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 2e       	mov	r0, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <DIO_enuTogPin+0xf8>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	0a 94       	dec	r0
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <DIO_enuTogPin+0xf4>
    12cc:	84 27       	eor	r24, r20
    12ce:	8c 93       	st	X, r24
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <DIO_enuTogPin+0x106>
						 Local_enuErrorState=ES_OK;
						}
			}
					else
					{
						Local_enuErrorState=ES_OUT_OF_RANGE;
    12d2:	83 e0       	ldi	r24, 0x03	; 3
    12d4:	89 83       	std	Y+1, r24	; 0x01
					}
						return Local_enuErrorState;
    12d6:	89 81       	ldd	r24, Y+1	; 0x01



}
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <DIO_enuGetPinValue>:




ES_t DIO_enuGetPinValue (u8 Copy_u8PortID,u8 Copy_u8PinID , u8 *Copy_pu8PintValue)
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	27 97       	sbiw	r28, 0x07	; 7
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	8a 83       	std	Y+2, r24	; 0x02
    12fe:	6b 83       	std	Y+3, r22	; 0x03
    1300:	5d 83       	std	Y+5, r21	; 0x05
    1302:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1304:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8PintValue != NULL)
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	9d 81       	ldd	r25, Y+5	; 0x05
    130a:	00 97       	sbiw	r24, 0x00	; 0
    130c:	09 f4       	brne	.+2      	; 0x1310 <DIO_enuGetPinValue+0x28>
    130e:	7c c0       	rjmp	.+248    	; 0x1408 <DIO_enuGetPinValue+0x120>
		{
			if(Copy_u8PortID <= DIO_PORTD &&  Copy_u8PinID <=DIO_PIN7){
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	84 30       	cpi	r24, 0x04	; 4
    1314:	08 f0       	brcs	.+2      	; 0x1318 <DIO_enuGetPinValue+0x30>
    1316:	75 c0       	rjmp	.+234    	; 0x1402 <DIO_enuGetPinValue+0x11a>
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	88 30       	cpi	r24, 0x08	; 8
    131c:	08 f0       	brcs	.+2      	; 0x1320 <DIO_enuGetPinValue+0x38>
    131e:	71 c0       	rjmp	.+226    	; 0x1402 <DIO_enuGetPinValue+0x11a>
				switch(Copy_u8PortID)
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	3f 83       	std	Y+7, r19	; 0x07
    1328:	2e 83       	std	Y+6, r18	; 0x06
    132a:	4e 81       	ldd	r20, Y+6	; 0x06
    132c:	5f 81       	ldd	r21, Y+7	; 0x07
    132e:	41 30       	cpi	r20, 0x01	; 1
    1330:	51 05       	cpc	r21, r1
    1332:	59 f1       	breq	.+86     	; 0x138a <DIO_enuGetPinValue+0xa2>
    1334:	8e 81       	ldd	r24, Y+6	; 0x06
    1336:	9f 81       	ldd	r25, Y+7	; 0x07
    1338:	82 30       	cpi	r24, 0x02	; 2
    133a:	91 05       	cpc	r25, r1
    133c:	34 f4       	brge	.+12     	; 0x134a <DIO_enuGetPinValue+0x62>
    133e:	2e 81       	ldd	r18, Y+6	; 0x06
    1340:	3f 81       	ldd	r19, Y+7	; 0x07
    1342:	21 15       	cp	r18, r1
    1344:	31 05       	cpc	r19, r1
    1346:	69 f0       	breq	.+26     	; 0x1362 <DIO_enuGetPinValue+0x7a>
    1348:	61 c0       	rjmp	.+194    	; 0x140c <DIO_enuGetPinValue+0x124>
    134a:	4e 81       	ldd	r20, Y+6	; 0x06
    134c:	5f 81       	ldd	r21, Y+7	; 0x07
    134e:	42 30       	cpi	r20, 0x02	; 2
    1350:	51 05       	cpc	r21, r1
    1352:	79 f1       	breq	.+94     	; 0x13b2 <DIO_enuGetPinValue+0xca>
    1354:	8e 81       	ldd	r24, Y+6	; 0x06
    1356:	9f 81       	ldd	r25, Y+7	; 0x07
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	91 05       	cpc	r25, r1
    135c:	09 f4       	brne	.+2      	; 0x1360 <DIO_enuGetPinValue+0x78>
    135e:	3d c0       	rjmp	.+122    	; 0x13da <DIO_enuGetPinValue+0xf2>
    1360:	55 c0       	rjmp	.+170    	; 0x140c <DIO_enuGetPinValue+0x124>
				{
					 case(DIO_PORTA):
							{
						 *Copy_pu8PintValue=((PINA >> Copy_u8PinID) & BIT_MASK );
    1362:	e9 e3       	ldi	r30, 0x39	; 57
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	88 2f       	mov	r24, r24
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	a9 01       	movw	r20, r18
    1374:	02 c0       	rjmp	.+4      	; 0x137a <DIO_enuGetPinValue+0x92>
    1376:	55 95       	asr	r21
    1378:	47 95       	ror	r20
    137a:	8a 95       	dec	r24
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <DIO_enuGetPinValue+0x8e>
    137e:	ca 01       	movw	r24, r20
    1380:	81 70       	andi	r24, 0x01	; 1
    1382:	ec 81       	ldd	r30, Y+4	; 0x04
    1384:	fd 81       	ldd	r31, Y+5	; 0x05
    1386:	80 83       	st	Z, r24
    1388:	41 c0       	rjmp	.+130    	; 0x140c <DIO_enuGetPinValue+0x124>
							   break;
							}
					case(DIO_PORTB):
				     		{
						 *Copy_pu8PintValue=((PINB >> Copy_u8PinID) & BIT_MASK );
    138a:	e6 e3       	ldi	r30, 0x36	; 54
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a9 01       	movw	r20, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <DIO_enuGetPinValue+0xba>
    139e:	55 95       	asr	r21
    13a0:	47 95       	ror	r20
    13a2:	8a 95       	dec	r24
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <DIO_enuGetPinValue+0xb6>
    13a6:	ca 01       	movw	r24, r20
    13a8:	81 70       	andi	r24, 0x01	; 1
    13aa:	ec 81       	ldd	r30, Y+4	; 0x04
    13ac:	fd 81       	ldd	r31, Y+5	; 0x05
    13ae:	80 83       	st	Z, r24
    13b0:	2d c0       	rjmp	.+90     	; 0x140c <DIO_enuGetPinValue+0x124>
							   break;
							}
					case(DIO_PORTC):
				        	{
						*Copy_pu8PintValue=((PINC >> Copy_u8PinID) & BIT_MASK );
    13b2:	e3 e3       	ldi	r30, 0x33	; 51
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	88 2f       	mov	r24, r24
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	a9 01       	movw	r20, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <DIO_enuGetPinValue+0xe2>
    13c6:	55 95       	asr	r21
    13c8:	47 95       	ror	r20
    13ca:	8a 95       	dec	r24
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <DIO_enuGetPinValue+0xde>
    13ce:	ca 01       	movw	r24, r20
    13d0:	81 70       	andi	r24, 0x01	; 1
    13d2:	ec 81       	ldd	r30, Y+4	; 0x04
    13d4:	fd 81       	ldd	r31, Y+5	; 0x05
    13d6:	80 83       	st	Z, r24
    13d8:	19 c0       	rjmp	.+50     	; 0x140c <DIO_enuGetPinValue+0x124>
							    break;
							}
					case(DIO_PORTD):
							{
						*Copy_pu8PintValue=((PIND >> Copy_u8PinID) & BIT_MASK );
    13da:	e0 e3       	ldi	r30, 0x30	; 48
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	88 2f       	mov	r24, r24
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	a9 01       	movw	r20, r18
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <DIO_enuGetPinValue+0x10a>
    13ee:	55 95       	asr	r21
    13f0:	47 95       	ror	r20
    13f2:	8a 95       	dec	r24
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <DIO_enuGetPinValue+0x106>
    13f6:	ca 01       	movw	r24, r20
    13f8:	81 70       	andi	r24, 0x01	; 1
    13fa:	ec 81       	ldd	r30, Y+4	; 0x04
    13fc:	fd 81       	ldd	r31, Y+5	; 0x05
    13fe:	80 83       	st	Z, r24
    1400:	05 c0       	rjmp	.+10     	; 0x140c <DIO_enuGetPinValue+0x124>
							Local_enuErrorState=ES_OK;
				}
			}
			else
			{
				Local_enuErrorState=ES_OUT_OF_RANGE;
    1402:	83 e0       	ldi	r24, 0x03	; 3
    1404:	89 83       	std	Y+1, r24	; 0x01
    1406:	02 c0       	rjmp	.+4      	; 0x140c <DIO_enuGetPinValue+0x124>
			}
		}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    1408:	82 e0       	ldi	r24, 0x02	; 2
    140a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    140c:	89 81       	ldd	r24, Y+1	; 0x01


}
    140e:	27 96       	adiw	r28, 0x07	; 7
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <LCD_enuInit>:


#include "LCD_interface.h"

ES_t LCD_enuInit(void)
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	e9 97       	sbiw	r28, 0x39	; 57
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    1434:	19 ae       	std	Y+57, r1	; 0x39

	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    1436:	82 e0       	ldi	r24, 0x02	; 2
    1438:	60 e0       	ldi	r22, 0x00	; 0
    143a:	41 e0       	ldi	r20, 0x01	; 1
    143c:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    1440:	82 e0       	ldi	r24, 0x02	; 2
    1442:	61 e0       	ldi	r22, 0x01	; 1
    1444:	41 e0       	ldi	r20, 0x01	; 1
    1446:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    144a:	82 e0       	ldi	r24, 0x02	; 2
    144c:	62 e0       	ldi	r22, 0x02	; 2
    144e:	41 e0       	ldi	r20, 0x01	; 1
    1450:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    1454:	83 e0       	ldi	r24, 0x03	; 3
    1456:	67 e0       	ldi	r22, 0x07	; 7
    1458:	41 e0       	ldi	r20, 0x01	; 1
    145a:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    145e:	83 e0       	ldi	r24, 0x03	; 3
    1460:	66 e0       	ldi	r22, 0x06	; 6
    1462:	41 e0       	ldi	r20, 0x01	; 1
    1464:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    1468:	83 e0       	ldi	r24, 0x03	; 3
    146a:	65 e0       	ldi	r22, 0x05	; 5
    146c:	41 e0       	ldi	r20, 0x01	; 1
    146e:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    1472:	83 e0       	ldi	r24, 0x03	; 3
    1474:	64 e0       	ldi	r22, 0x04	; 4
    1476:	41 e0       	ldi	r20, 0x01	; 1
    1478:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_enuSetPinDirection>
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	ac e0       	ldi	r26, 0x0C	; 12
    1482:	b2 e4       	ldi	r27, 0x42	; 66
    1484:	8d ab       	std	Y+53, r24	; 0x35
    1486:	9e ab       	std	Y+54, r25	; 0x36
    1488:	af ab       	std	Y+55, r26	; 0x37
    148a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    148c:	6d a9       	ldd	r22, Y+53	; 0x35
    148e:	7e a9       	ldd	r23, Y+54	; 0x36
    1490:	8f a9       	ldd	r24, Y+55	; 0x37
    1492:	98 ad       	ldd	r25, Y+56	; 0x38
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	4a ef       	ldi	r20, 0xFA	; 250
    149a:	54 e4       	ldi	r21, 0x44	; 68
    149c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	89 ab       	std	Y+49, r24	; 0x31
    14a6:	9a ab       	std	Y+50, r25	; 0x32
    14a8:	ab ab       	std	Y+51, r26	; 0x33
    14aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14ac:	69 a9       	ldd	r22, Y+49	; 0x31
    14ae:	7a a9       	ldd	r23, Y+50	; 0x32
    14b0:	8b a9       	ldd	r24, Y+51	; 0x33
    14b2:	9c a9       	ldd	r25, Y+52	; 0x34
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e8       	ldi	r20, 0x80	; 128
    14ba:	5f e3       	ldi	r21, 0x3F	; 63
    14bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14c0:	88 23       	and	r24, r24
    14c2:	2c f4       	brge	.+10     	; 0x14ce <LCD_enuInit+0xae>
		__ticks = 1;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	98 ab       	std	Y+48, r25	; 0x30
    14ca:	8f a7       	std	Y+47, r24	; 0x2f
    14cc:	3f c0       	rjmp	.+126    	; 0x154c <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    14ce:	69 a9       	ldd	r22, Y+49	; 0x31
    14d0:	7a a9       	ldd	r23, Y+50	; 0x32
    14d2:	8b a9       	ldd	r24, Y+51	; 0x33
    14d4:	9c a9       	ldd	r25, Y+52	; 0x34
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	3f ef       	ldi	r19, 0xFF	; 255
    14da:	4f e7       	ldi	r20, 0x7F	; 127
    14dc:	57 e4       	ldi	r21, 0x47	; 71
    14de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14e2:	18 16       	cp	r1, r24
    14e4:	4c f5       	brge	.+82     	; 0x1538 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e6:	6d a9       	ldd	r22, Y+53	; 0x35
    14e8:	7e a9       	ldd	r23, Y+54	; 0x36
    14ea:	8f a9       	ldd	r24, Y+55	; 0x37
    14ec:	98 ad       	ldd	r25, Y+56	; 0x38
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	40 e2       	ldi	r20, 0x20	; 32
    14f4:	51 e4       	ldi	r21, 0x41	; 65
    14f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	98 ab       	std	Y+48, r25	; 0x30
    150c:	8f a7       	std	Y+47, r24	; 0x2f
    150e:	0f c0       	rjmp	.+30     	; 0x152e <LCD_enuInit+0x10e>
    1510:	88 ec       	ldi	r24, 0xC8	; 200
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	9e a7       	std	Y+46, r25	; 0x2e
    1516:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1518:	8d a5       	ldd	r24, Y+45	; 0x2d
    151a:	9e a5       	ldd	r25, Y+46	; 0x2e
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	f1 f7       	brne	.-4      	; 0x151c <LCD_enuInit+0xfc>
    1520:	9e a7       	std	Y+46, r25	; 0x2e
    1522:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1524:	8f a5       	ldd	r24, Y+47	; 0x2f
    1526:	98 a9       	ldd	r25, Y+48	; 0x30
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	98 ab       	std	Y+48, r25	; 0x30
    152c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1530:	98 a9       	ldd	r25, Y+48	; 0x30
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	69 f7       	brne	.-38     	; 0x1510 <LCD_enuInit+0xf0>
    1536:	14 c0       	rjmp	.+40     	; 0x1560 <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1538:	69 a9       	ldd	r22, Y+49	; 0x31
    153a:	7a a9       	ldd	r23, Y+50	; 0x32
    153c:	8b a9       	ldd	r24, Y+51	; 0x33
    153e:	9c a9       	ldd	r25, Y+52	; 0x34
    1540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	98 ab       	std	Y+48, r25	; 0x30
    154a:	8f a7       	std	Y+47, r24	; 0x2f
    154c:	8f a5       	ldd	r24, Y+47	; 0x2f
    154e:	98 a9       	ldd	r25, Y+48	; 0x30
    1550:	9c a7       	std	Y+44, r25	; 0x2c
    1552:	8b a7       	std	Y+43, r24	; 0x2b
    1554:	8b a5       	ldd	r24, Y+43	; 0x2b
    1556:	9c a5       	ldd	r25, Y+44	; 0x2c
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <LCD_enuInit+0x138>
    155c:	9c a7       	std	Y+44, r25	; 0x2c
    155e:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinDirection(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    1560:	83 e0       	ldi	r24, 0x03	; 3
    1562:	63 e0       	ldi	r22, 0x03	; 3
    1564:	41 e0       	ldi	r20, 0x01	; 1
    1566:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    156a:	83 e0       	ldi	r24, 0x03	; 3
    156c:	62 e0       	ldi	r22, 0x02	; 2
    156e:	41 e0       	ldi	r20, 0x01	; 1
    1570:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    1574:	83 e0       	ldi	r24, 0x03	; 3
    1576:	61 e0       	ldi	r22, 0x01	; 1
    1578:	41 e0       	ldi	r20, 0x01	; 1
    157a:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    157e:	83 e0       	ldi	r24, 0x03	; 3
    1580:	60 e0       	ldi	r22, 0x00	; 0
    1582:	41 e0       	ldi	r20, 0x01	; 1
    1584:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_enuSetPinDirection>

	//function set
	LCD_invidSendCommend(0x38);
    1588:	88 e3       	ldi	r24, 0x38	; 56
    158a:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <LCD_invidSendCommend>
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	a0 e8       	ldi	r26, 0x80	; 128
    1594:	bf e3       	ldi	r27, 0x3F	; 63
    1596:	8f a3       	std	Y+39, r24	; 0x27
    1598:	98 a7       	std	Y+40, r25	; 0x28
    159a:	a9 a7       	std	Y+41, r26	; 0x29
    159c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    159e:	6f a1       	ldd	r22, Y+39	; 0x27
    15a0:	78 a5       	ldd	r23, Y+40	; 0x28
    15a2:	89 a5       	ldd	r24, Y+41	; 0x29
    15a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	4a ef       	ldi	r20, 0xFA	; 250
    15ac:	54 e4       	ldi	r21, 0x44	; 68
    15ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	8b a3       	std	Y+35, r24	; 0x23
    15b8:	9c a3       	std	Y+36, r25	; 0x24
    15ba:	ad a3       	std	Y+37, r26	; 0x25
    15bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15be:	6b a1       	ldd	r22, Y+35	; 0x23
    15c0:	7c a1       	ldd	r23, Y+36	; 0x24
    15c2:	8d a1       	ldd	r24, Y+37	; 0x25
    15c4:	9e a1       	ldd	r25, Y+38	; 0x26
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 e8       	ldi	r20, 0x80	; 128
    15cc:	5f e3       	ldi	r21, 0x3F	; 63
    15ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15d2:	88 23       	and	r24, r24
    15d4:	2c f4       	brge	.+10     	; 0x15e0 <LCD_enuInit+0x1c0>
		__ticks = 1;
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	9a a3       	std	Y+34, r25	; 0x22
    15dc:	89 a3       	std	Y+33, r24	; 0x21
    15de:	3f c0       	rjmp	.+126    	; 0x165e <LCD_enuInit+0x23e>
	else if (__tmp > 65535)
    15e0:	6b a1       	ldd	r22, Y+35	; 0x23
    15e2:	7c a1       	ldd	r23, Y+36	; 0x24
    15e4:	8d a1       	ldd	r24, Y+37	; 0x25
    15e6:	9e a1       	ldd	r25, Y+38	; 0x26
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	3f ef       	ldi	r19, 0xFF	; 255
    15ec:	4f e7       	ldi	r20, 0x7F	; 127
    15ee:	57 e4       	ldi	r21, 0x47	; 71
    15f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15f4:	18 16       	cp	r1, r24
    15f6:	4c f5       	brge	.+82     	; 0x164a <LCD_enuInit+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f8:	6f a1       	ldd	r22, Y+39	; 0x27
    15fa:	78 a5       	ldd	r23, Y+40	; 0x28
    15fc:	89 a5       	ldd	r24, Y+41	; 0x29
    15fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	40 e2       	ldi	r20, 0x20	; 32
    1606:	51 e4       	ldi	r21, 0x41	; 65
    1608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	bc 01       	movw	r22, r24
    1612:	cd 01       	movw	r24, r26
    1614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	9a a3       	std	Y+34, r25	; 0x22
    161e:	89 a3       	std	Y+33, r24	; 0x21
    1620:	0f c0       	rjmp	.+30     	; 0x1640 <LCD_enuInit+0x220>
    1622:	88 ec       	ldi	r24, 0xC8	; 200
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	98 a3       	std	Y+32, r25	; 0x20
    1628:	8f 8f       	std	Y+31, r24	; 0x1f
    162a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    162c:	98 a1       	ldd	r25, Y+32	; 0x20
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <LCD_enuInit+0x20e>
    1632:	98 a3       	std	Y+32, r25	; 0x20
    1634:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1636:	89 a1       	ldd	r24, Y+33	; 0x21
    1638:	9a a1       	ldd	r25, Y+34	; 0x22
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	9a a3       	std	Y+34, r25	; 0x22
    163e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1640:	89 a1       	ldd	r24, Y+33	; 0x21
    1642:	9a a1       	ldd	r25, Y+34	; 0x22
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	69 f7       	brne	.-38     	; 0x1622 <LCD_enuInit+0x202>
    1648:	14 c0       	rjmp	.+40     	; 0x1672 <LCD_enuInit+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    164a:	6b a1       	ldd	r22, Y+35	; 0x23
    164c:	7c a1       	ldd	r23, Y+36	; 0x24
    164e:	8d a1       	ldd	r24, Y+37	; 0x25
    1650:	9e a1       	ldd	r25, Y+38	; 0x26
    1652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	9a a3       	std	Y+34, r25	; 0x22
    165c:	89 a3       	std	Y+33, r24	; 0x21
    165e:	89 a1       	ldd	r24, Y+33	; 0x21
    1660:	9a a1       	ldd	r25, Y+34	; 0x22
    1662:	9e 8f       	std	Y+30, r25	; 0x1e
    1664:	8d 8f       	std	Y+29, r24	; 0x1d
    1666:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1668:	9e 8d       	ldd	r25, Y+30	; 0x1e
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	f1 f7       	brne	.-4      	; 0x166a <LCD_enuInit+0x24a>
    166e:	9e 8f       	std	Y+30, r25	; 0x1e
    1670:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommend(0x28);
#endif
	_delay_ms(1);
	LCD_invidSendCommend(0x0f);  //display on , cursor on , blinking on
    1672:	8f e0       	ldi	r24, 0x0F	; 15
    1674:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <LCD_invidSendCommend>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	a0 e8       	ldi	r26, 0x80	; 128
    167e:	bf e3       	ldi	r27, 0x3F	; 63
    1680:	89 8f       	std	Y+25, r24	; 0x19
    1682:	9a 8f       	std	Y+26, r25	; 0x1a
    1684:	ab 8f       	std	Y+27, r26	; 0x1b
    1686:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1688:	69 8d       	ldd	r22, Y+25	; 0x19
    168a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    168c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    168e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	4a ef       	ldi	r20, 0xFA	; 250
    1696:	54 e4       	ldi	r21, 0x44	; 68
    1698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	8d 8b       	std	Y+21, r24	; 0x15
    16a2:	9e 8b       	std	Y+22, r25	; 0x16
    16a4:	af 8b       	std	Y+23, r26	; 0x17
    16a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16a8:	6d 89       	ldd	r22, Y+21	; 0x15
    16aa:	7e 89       	ldd	r23, Y+22	; 0x16
    16ac:	8f 89       	ldd	r24, Y+23	; 0x17
    16ae:	98 8d       	ldd	r25, Y+24	; 0x18
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e8       	ldi	r20, 0x80	; 128
    16b6:	5f e3       	ldi	r21, 0x3F	; 63
    16b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16bc:	88 23       	and	r24, r24
    16be:	2c f4       	brge	.+10     	; 0x16ca <LCD_enuInit+0x2aa>
		__ticks = 1;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	9c 8b       	std	Y+20, r25	; 0x14
    16c6:	8b 8b       	std	Y+19, r24	; 0x13
    16c8:	3f c0       	rjmp	.+126    	; 0x1748 <LCD_enuInit+0x328>
	else if (__tmp > 65535)
    16ca:	6d 89       	ldd	r22, Y+21	; 0x15
    16cc:	7e 89       	ldd	r23, Y+22	; 0x16
    16ce:	8f 89       	ldd	r24, Y+23	; 0x17
    16d0:	98 8d       	ldd	r25, Y+24	; 0x18
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	3f ef       	ldi	r19, 0xFF	; 255
    16d6:	4f e7       	ldi	r20, 0x7F	; 127
    16d8:	57 e4       	ldi	r21, 0x47	; 71
    16da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16de:	18 16       	cp	r1, r24
    16e0:	4c f5       	brge	.+82     	; 0x1734 <LCD_enuInit+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e2:	69 8d       	ldd	r22, Y+25	; 0x19
    16e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e2       	ldi	r20, 0x20	; 32
    16f0:	51 e4       	ldi	r21, 0x41	; 65
    16f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	bc 01       	movw	r22, r24
    16fc:	cd 01       	movw	r24, r26
    16fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	9c 8b       	std	Y+20, r25	; 0x14
    1708:	8b 8b       	std	Y+19, r24	; 0x13
    170a:	0f c0       	rjmp	.+30     	; 0x172a <LCD_enuInit+0x30a>
    170c:	88 ec       	ldi	r24, 0xC8	; 200
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	9a 8b       	std	Y+18, r25	; 0x12
    1712:	89 8b       	std	Y+17, r24	; 0x11
    1714:	89 89       	ldd	r24, Y+17	; 0x11
    1716:	9a 89       	ldd	r25, Y+18	; 0x12
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <LCD_enuInit+0x2f8>
    171c:	9a 8b       	std	Y+18, r25	; 0x12
    171e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1720:	8b 89       	ldd	r24, Y+19	; 0x13
    1722:	9c 89       	ldd	r25, Y+20	; 0x14
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	9c 8b       	std	Y+20, r25	; 0x14
    1728:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172a:	8b 89       	ldd	r24, Y+19	; 0x13
    172c:	9c 89       	ldd	r25, Y+20	; 0x14
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	69 f7       	brne	.-38     	; 0x170c <LCD_enuInit+0x2ec>
    1732:	14 c0       	rjmp	.+40     	; 0x175c <LCD_enuInit+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1734:	6d 89       	ldd	r22, Y+21	; 0x15
    1736:	7e 89       	ldd	r23, Y+22	; 0x16
    1738:	8f 89       	ldd	r24, Y+23	; 0x17
    173a:	98 8d       	ldd	r25, Y+24	; 0x18
    173c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	9c 8b       	std	Y+20, r25	; 0x14
    1746:	8b 8b       	std	Y+19, r24	; 0x13
    1748:	8b 89       	ldd	r24, Y+19	; 0x13
    174a:	9c 89       	ldd	r25, Y+20	; 0x14
    174c:	98 8b       	std	Y+16, r25	; 0x10
    174e:	8f 87       	std	Y+15, r24	; 0x0f
    1750:	8f 85       	ldd	r24, Y+15	; 0x0f
    1752:	98 89       	ldd	r25, Y+16	; 0x10
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <LCD_enuInit+0x334>
    1758:	98 8b       	std	Y+16, r25	; 0x10
    175a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommend(0x01);  // Clear display
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <LCD_invidSendCommend>
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	a0 e0       	ldi	r26, 0x00	; 0
    1768:	b0 e4       	ldi	r27, 0x40	; 64
    176a:	8b 87       	std	Y+11, r24	; 0x0b
    176c:	9c 87       	std	Y+12, r25	; 0x0c
    176e:	ad 87       	std	Y+13, r26	; 0x0d
    1770:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1772:	6b 85       	ldd	r22, Y+11	; 0x0b
    1774:	7c 85       	ldd	r23, Y+12	; 0x0c
    1776:	8d 85       	ldd	r24, Y+13	; 0x0d
    1778:	9e 85       	ldd	r25, Y+14	; 0x0e
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	4a ef       	ldi	r20, 0xFA	; 250
    1780:	54 e4       	ldi	r21, 0x44	; 68
    1782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	8f 83       	std	Y+7, r24	; 0x07
    178c:	98 87       	std	Y+8, r25	; 0x08
    178e:	a9 87       	std	Y+9, r26	; 0x09
    1790:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1792:	6f 81       	ldd	r22, Y+7	; 0x07
    1794:	78 85       	ldd	r23, Y+8	; 0x08
    1796:	89 85       	ldd	r24, Y+9	; 0x09
    1798:	9a 85       	ldd	r25, Y+10	; 0x0a
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e8       	ldi	r20, 0x80	; 128
    17a0:	5f e3       	ldi	r21, 0x3F	; 63
    17a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17a6:	88 23       	and	r24, r24
    17a8:	2c f4       	brge	.+10     	; 0x17b4 <LCD_enuInit+0x394>
		__ticks = 1;
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	9e 83       	std	Y+6, r25	; 0x06
    17b0:	8d 83       	std	Y+5, r24	; 0x05
    17b2:	3f c0       	rjmp	.+126    	; 0x1832 <LCD_enuInit+0x412>
	else if (__tmp > 65535)
    17b4:	6f 81       	ldd	r22, Y+7	; 0x07
    17b6:	78 85       	ldd	r23, Y+8	; 0x08
    17b8:	89 85       	ldd	r24, Y+9	; 0x09
    17ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	3f ef       	ldi	r19, 0xFF	; 255
    17c0:	4f e7       	ldi	r20, 0x7F	; 127
    17c2:	57 e4       	ldi	r21, 0x47	; 71
    17c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17c8:	18 16       	cp	r1, r24
    17ca:	4c f5       	brge	.+82     	; 0x181e <LCD_enuInit+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e2       	ldi	r20, 0x20	; 32
    17da:	51 e4       	ldi	r21, 0x41	; 65
    17dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	bc 01       	movw	r22, r24
    17e6:	cd 01       	movw	r24, r26
    17e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	9e 83       	std	Y+6, r25	; 0x06
    17f2:	8d 83       	std	Y+5, r24	; 0x05
    17f4:	0f c0       	rjmp	.+30     	; 0x1814 <LCD_enuInit+0x3f4>
    17f6:	88 ec       	ldi	r24, 0xC8	; 200
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	9c 83       	std	Y+4, r25	; 0x04
    17fc:	8b 83       	std	Y+3, r24	; 0x03
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	9c 81       	ldd	r25, Y+4	; 0x04
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <LCD_enuInit+0x3e2>
    1806:	9c 83       	std	Y+4, r25	; 0x04
    1808:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	9e 81       	ldd	r25, Y+6	; 0x06
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	9e 83       	std	Y+6, r25	; 0x06
    1812:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1814:	8d 81       	ldd	r24, Y+5	; 0x05
    1816:	9e 81       	ldd	r25, Y+6	; 0x06
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	69 f7       	brne	.-38     	; 0x17f6 <LCD_enuInit+0x3d6>
    181c:	14 c0       	rjmp	.+40     	; 0x1846 <LCD_enuInit+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181e:	6f 81       	ldd	r22, Y+7	; 0x07
    1820:	78 85       	ldd	r23, Y+8	; 0x08
    1822:	89 85       	ldd	r24, Y+9	; 0x09
    1824:	9a 85       	ldd	r25, Y+10	; 0x0a
    1826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	9e 83       	std	Y+6, r25	; 0x06
    1830:	8d 83       	std	Y+5, r24	; 0x05
    1832:	8d 81       	ldd	r24, Y+5	; 0x05
    1834:	9e 81       	ldd	r25, Y+6	; 0x06
    1836:	9a 83       	std	Y+2, r25	; 0x02
    1838:	89 83       	std	Y+1, r24	; 0x01
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	9a 81       	ldd	r25, Y+2	; 0x02
    183e:	01 97       	sbiw	r24, 0x01	; 1
    1840:	f1 f7       	brne	.-4      	; 0x183e <LCD_enuInit+0x41e>
    1842:	9a 83       	std	Y+2, r25	; 0x02
    1844:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommend(0x06);  //write from left to write without shifting
    1846:	86 e0       	ldi	r24, 0x06	; 6
    1848:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <LCD_invidSendCommend>

	return Local_enuErrorState;
    184c:	89 ad       	ldd	r24, Y+57	; 0x39
}
    184e:	e9 96       	adiw	r28, 0x39	; 57
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	00 d0       	rcall	.+0      	; 0x1866 <LCD_enuDisplayChar+0x6>
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    186c:	19 82       	std	Y+1, r1	; 0x01
	//  Set RS as Data
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    186e:	82 e0       	ldi	r24, 0x02	; 2
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	41 e0       	ldi	r20, 0x01	; 1
    1874:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Data);
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_vidLatch>

	return Local_enuErrorState;
    187e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	00 d0       	rcall	.+0      	; 0x1890 <LCD_enuSendCommand+0x6>
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1896:	19 82       	std	Y+1, r1	; 0x01

	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    1898:	82 e0       	ldi	r24, 0x02	; 2
    189a:	60 e0       	ldi	r22, 0x00	; 0
    189c:	40 e0       	ldi	r20, 0x00	; 0
    189e:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Command);
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_vidLatch>


	return Local_enuErrorState;
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <LCD_enuDisplayIntegerNum>:


ES_t LCD_enuDisplayIntegerNum(s32 Copy_s32Num)
{
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	2b 97       	sbiw	r28, 0x0b	; 11
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	f8 94       	cli
    18c2:	de bf       	out	0x3e, r29	; 62
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	cd bf       	out	0x3d, r28	; 61
    18c8:	68 87       	std	Y+8, r22	; 0x08
    18ca:	79 87       	std	Y+9, r23	; 0x09
    18cc:	8a 87       	std	Y+10, r24	; 0x0a
    18ce:	9b 87       	std	Y+11, r25	; 0x0b
	ES_t Local_enuErrorState = ES_NOK;
    18d0:	1f 82       	std	Y+7, r1	; 0x07

	s32 Local_s32Reverse=0;
    18d2:	1b 82       	std	Y+3, r1	; 0x03
    18d4:	1c 82       	std	Y+4, r1	; 0x04
    18d6:	1d 82       	std	Y+5, r1	; 0x05
    18d8:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8Remainder=0 , Local_u8NumDigit=0;
    18da:	1a 82       	std	Y+2, r1	; 0x02
    18dc:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s32Num <0)
    18de:	88 85       	ldd	r24, Y+8	; 0x08
    18e0:	99 85       	ldd	r25, Y+9	; 0x09
    18e2:	aa 85       	ldd	r26, Y+10	; 0x0a
    18e4:	bb 85       	ldd	r27, Y+11	; 0x0b
    18e6:	bb 23       	and	r27, r27
    18e8:	0c f0       	brlt	.+2      	; 0x18ec <LCD_enuDisplayIntegerNum+0x38>
    18ea:	57 c0       	rjmp	.+174    	; 0x199a <LCD_enuDisplayIntegerNum+0xe6>
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    18ec:	82 e0       	ldi	r24, 0x02	; 2
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	41 e0       	ldi	r20, 0x01	; 1
    18f2:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
		LCD_vidLatch('-');
    18f6:	8d e2       	ldi	r24, 0x2D	; 45
    18f8:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_vidLatch>
		Copy_s32Num *= -1 ;
    18fc:	88 85       	ldd	r24, Y+8	; 0x08
    18fe:	99 85       	ldd	r25, Y+9	; 0x09
    1900:	aa 85       	ldd	r26, Y+10	; 0x0a
    1902:	bb 85       	ldd	r27, Y+11	; 0x0b
    1904:	b0 95       	com	r27
    1906:	a0 95       	com	r26
    1908:	90 95       	com	r25
    190a:	81 95       	neg	r24
    190c:	9f 4f       	sbci	r25, 0xFF	; 255
    190e:	af 4f       	sbci	r26, 0xFF	; 255
    1910:	bf 4f       	sbci	r27, 0xFF	; 255
    1912:	88 87       	std	Y+8, r24	; 0x08
    1914:	99 87       	std	Y+9, r25	; 0x09
    1916:	aa 87       	std	Y+10, r26	; 0x0a
    1918:	bb 87       	std	Y+11, r27	; 0x0b
    191a:	3f c0       	rjmp	.+126    	; 0x199a <LCD_enuDisplayIntegerNum+0xe6>
	}
	while (Copy_s32Num)
	{
		Local_u8Remainder = Copy_s32Num % 10;
    191c:	88 85       	ldd	r24, Y+8	; 0x08
    191e:	99 85       	ldd	r25, Y+9	; 0x09
    1920:	aa 85       	ldd	r26, Y+10	; 0x0a
    1922:	bb 85       	ldd	r27, Y+11	; 0x0b
    1924:	2a e0       	ldi	r18, 0x0A	; 10
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	50 e0       	ldi	r21, 0x00	; 0
    192c:	bc 01       	movw	r22, r24
    192e:	cd 01       	movw	r24, r26
    1930:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__divmodsi4>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	8a 83       	std	Y+2, r24	; 0x02
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	9c 81       	ldd	r25, Y+4	; 0x04
    193e:	ad 81       	ldd	r26, Y+5	; 0x05
    1940:	be 81       	ldd	r27, Y+6	; 0x06
    1942:	2a e0       	ldi	r18, 0x0A	; 10
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	40 e0       	ldi	r20, 0x00	; 0
    1948:	50 e0       	ldi	r21, 0x00	; 0
    194a:	bc 01       	movw	r22, r24
    194c:	cd 01       	movw	r24, r26
    194e:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__mulsi3>
    1952:	9b 01       	movw	r18, r22
    1954:	ac 01       	movw	r20, r24
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	88 2f       	mov	r24, r24
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	a0 e0       	ldi	r26, 0x00	; 0
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	82 0f       	add	r24, r18
    1962:	93 1f       	adc	r25, r19
    1964:	a4 1f       	adc	r26, r20
    1966:	b5 1f       	adc	r27, r21
    1968:	8b 83       	std	Y+3, r24	; 0x03
    196a:	9c 83       	std	Y+4, r25	; 0x04
    196c:	ad 83       	std	Y+5, r26	; 0x05
    196e:	be 83       	std	Y+6, r27	; 0x06
		Copy_s32Num /=10;
    1970:	88 85       	ldd	r24, Y+8	; 0x08
    1972:	99 85       	ldd	r25, Y+9	; 0x09
    1974:	aa 85       	ldd	r26, Y+10	; 0x0a
    1976:	bb 85       	ldd	r27, Y+11	; 0x0b
    1978:	2a e0       	ldi	r18, 0x0A	; 10
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	50 e0       	ldi	r21, 0x00	; 0
    1980:	bc 01       	movw	r22, r24
    1982:	cd 01       	movw	r24, r26
    1984:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__divmodsi4>
    1988:	da 01       	movw	r26, r20
    198a:	c9 01       	movw	r24, r18
    198c:	88 87       	std	Y+8, r24	; 0x08
    198e:	99 87       	std	Y+9, r25	; 0x09
    1990:	aa 87       	std	Y+10, r26	; 0x0a
    1992:	bb 87       	std	Y+11, r27	; 0x0b
		Local_u8NumDigit ++;
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	8f 5f       	subi	r24, 0xFF	; 255
    1998:	89 83       	std	Y+1, r24	; 0x01
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		LCD_vidLatch('-');
		Copy_s32Num *= -1 ;
	}
	while (Copy_s32Num)
    199a:	88 85       	ldd	r24, Y+8	; 0x08
    199c:	99 85       	ldd	r25, Y+9	; 0x09
    199e:	aa 85       	ldd	r26, Y+10	; 0x0a
    19a0:	bb 85       	ldd	r27, Y+11	; 0x0b
    19a2:	00 97       	sbiw	r24, 0x00	; 0
    19a4:	a1 05       	cpc	r26, r1
    19a6:	b1 05       	cpc	r27, r1
    19a8:	09 f0       	breq	.+2      	; 0x19ac <LCD_enuDisplayIntegerNum+0xf8>
    19aa:	b8 cf       	rjmp	.-144    	; 0x191c <LCD_enuDisplayIntegerNum+0x68>
    19ac:	2d c0       	rjmp	.+90     	; 0x1a08 <LCD_enuDisplayIntegerNum+0x154>
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
	{
		Local_u8Remainder = Local_s32Reverse % 10;
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	9c 81       	ldd	r25, Y+4	; 0x04
    19b2:	ad 81       	ldd	r26, Y+5	; 0x05
    19b4:	be 81       	ldd	r27, Y+6	; 0x06
    19b6:	2a e0       	ldi	r18, 0x0A	; 10
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e0       	ldi	r20, 0x00	; 0
    19bc:	50 e0       	ldi	r21, 0x00	; 0
    19be:	bc 01       	movw	r22, r24
    19c0:	cd 01       	movw	r24, r26
    19c2:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__divmodsi4>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	8a 83       	std	Y+2, r24	; 0x02
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    19cc:	82 e0       	ldi	r24, 0x02	; 2
    19ce:	60 e0       	ldi	r22, 0x00	; 0
    19d0:	41 e0       	ldi	r20, 0x01	; 1
    19d2:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
		LCD_vidLatch(Local_u8Remainder + '0');
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	80 5d       	subi	r24, 0xD0	; 208
    19da:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_vidLatch>
		Local_s32Reverse /= 10;
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	9c 81       	ldd	r25, Y+4	; 0x04
    19e2:	ad 81       	ldd	r26, Y+5	; 0x05
    19e4:	be 81       	ldd	r27, Y+6	; 0x06
    19e6:	2a e0       	ldi	r18, 0x0A	; 10
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e0       	ldi	r20, 0x00	; 0
    19ec:	50 e0       	ldi	r21, 0x00	; 0
    19ee:	bc 01       	movw	r22, r24
    19f0:	cd 01       	movw	r24, r26
    19f2:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__divmodsi4>
    19f6:	da 01       	movw	r26, r20
    19f8:	c9 01       	movw	r24, r18
    19fa:	8b 83       	std	Y+3, r24	; 0x03
    19fc:	9c 83       	std	Y+4, r25	; 0x04
    19fe:	ad 83       	std	Y+5, r26	; 0x05
    1a00:	be 83       	std	Y+6, r27	; 0x06
		Local_u8NumDigit --;
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	81 50       	subi	r24, 0x01	; 1
    1a06:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
		Copy_s32Num /=10;
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	88 23       	and	r24, r24
    1a0c:	81 f6       	brne	.-96     	; 0x19ae <LCD_enuDisplayIntegerNum+0xfa>
		LCD_vidLatch(Local_u8Remainder + '0');
		Local_s32Reverse /= 10;
		Local_u8NumDigit --;
	}

	return Local_enuErrorState;
    1a0e:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1a10:	2b 96       	adiw	r28, 0x0b	; 11
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <LCD_enuDisplayExtraChar>:

ES_t LCD_enuDisplayExtraChar(u8* Copy_pu8Character,u8 Copy_u8CharNum ,u8 Copy_u8Position , u8 Copy_u8Entry)
{
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	27 97       	sbiw	r28, 0x07	; 7
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	f8 94       	cli
    1a30:	de bf       	out	0x3e, r29	; 62
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	cd bf       	out	0x3d, r28	; 61
    1a36:	9c 83       	std	Y+4, r25	; 0x04
    1a38:	8b 83       	std	Y+3, r24	; 0x03
    1a3a:	6d 83       	std	Y+5, r22	; 0x05
    1a3c:	4e 83       	std	Y+6, r20	; 0x06
    1a3e:	2f 83       	std	Y+7, r18	; 0x07
	ES_t Local_enuErrorState = ES_NOK;
    1a40:	1a 82       	std	Y+2, r1	; 0x02

	if (Copy_u8CharNum <= 8)
    1a42:	8d 81       	ldd	r24, Y+5	; 0x05
    1a44:	89 30       	cpi	r24, 0x09	; 9
    1a46:	08 f0       	brcs	.+2      	; 0x1a4a <LCD_enuDisplayExtraChar+0x28>
    1a48:	42 c0       	rjmp	.+132    	; 0x1ace <LCD_enuDisplayExtraChar+0xac>
	{
		LCD_invidSendCommend(0x40);
    1a4a:	80 e4       	ldi	r24, 0x40	; 64
    1a4c:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <LCD_invidSendCommend>
		u8 Local_u8Iter ;
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1a50:	82 e0       	ldi	r24, 0x02	; 2
    1a52:	60 e0       	ldi	r22, 0x00	; 0
    1a54:	41 e0       	ldi	r20, 0x01	; 1
    1a56:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
		for (Local_u8Iter=0 ; Local_u8Iter < (Copy_u8CharNum *8) ;Local_u8Iter ++)
    1a5a:	19 82       	std	Y+1, r1	; 0x01
    1a5c:	0e c0       	rjmp	.+28     	; 0x1a7a <LCD_enuDisplayExtraChar+0x58>
		{
			LCD_vidLatch(Copy_pu8Character[Local_u8Iter]);
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	9c 81       	ldd	r25, Y+4	; 0x04
    1a68:	fc 01       	movw	r30, r24
    1a6a:	e2 0f       	add	r30, r18
    1a6c:	f3 1f       	adc	r31, r19
    1a6e:	80 81       	ld	r24, Z
    1a70:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_vidLatch>
	if (Copy_u8CharNum <= 8)
	{
		LCD_invidSendCommend(0x40);
		u8 Local_u8Iter ;
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		for (Local_u8Iter=0 ; Local_u8Iter < (Copy_u8CharNum *8) ;Local_u8Iter ++)
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	8f 5f       	subi	r24, 0xFF	; 255
    1a78:	89 83       	std	Y+1, r24	; 0x01
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	88 2f       	mov	r24, r24
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	88 0f       	add	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	88 0f       	add	r24, r24
    1a90:	99 1f       	adc	r25, r25
    1a92:	28 17       	cp	r18, r24
    1a94:	39 07       	cpc	r19, r25
    1a96:	1c f3       	brlt	.-58     	; 0x1a5e <LCD_enuDisplayExtraChar+0x3c>
		{
			LCD_vidLatch(Copy_pu8Character[Local_u8Iter]);
		}
		if (Copy_u8Entry == 0x04)
    1a98:	8f 81       	ldd	r24, Y+7	; 0x07
    1a9a:	84 30       	cpi	r24, 0x04	; 4
    1a9c:	31 f4       	brne	.+12     	; 0x1aaa <LCD_enuDisplayExtraChar+0x88>
		{
			LCD_invidSendCommend(Copy_u8Position);
    1a9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa0:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <LCD_invidSendCommend>
			LCD_invidSendCommend(Copy_u8Entry);
    1aa4:	8f 81       	ldd	r24, Y+7	; 0x07
    1aa6:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <LCD_invidSendCommend>
		}\
    1aaa:	19 82       	std	Y+1, r1	; 0x01
    1aac:	0b c0       	rjmp	.+22     	; 0x1ac4 <LCD_enuDisplayExtraChar+0xa2>
		for (Local_u8Iter=0 ; Local_u8Iter < Copy_u8CharNum  ;Local_u8Iter ++)
		{
			DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1aae:	82 e0       	ldi	r24, 0x02	; 2
    1ab0:	60 e0       	ldi	r22, 0x00	; 0
    1ab2:	41 e0       	ldi	r20, 0x01	; 1
    1ab4:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
			LCD_vidLatch(Local_u8Iter);
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_vidLatch>
		}
		if (Copy_u8Entry == 0x04)
		{
			LCD_invidSendCommend(Copy_u8Position);
			LCD_invidSendCommend(Copy_u8Entry);
		}\
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	8f 5f       	subi	r24, 0xFF	; 255
    1ac2:	89 83       	std	Y+1, r24	; 0x01
		for (Local_u8Iter=0 ; Local_u8Iter < Copy_u8CharNum  ;Local_u8Iter ++)
    1ac4:	99 81       	ldd	r25, Y+1	; 0x01
    1ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac8:	98 17       	cp	r25, r24
    1aca:	88 f3       	brcs	.-30     	; 0x1aae <LCD_enuDisplayExtraChar+0x8c>
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <LCD_enuDisplayExtraChar+0xb0>
			LCD_vidLatch(Local_u8Iter);
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1ace:	83 e0       	ldi	r24, 0x03	; 3
    1ad0:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1ad4:	27 96       	adiw	r28, 0x07	; 7
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	f8 94       	cli
    1ada:	de bf       	out	0x3e, r29	; 62
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	cd bf       	out	0x3d, r28	; 61
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <LCD_vidLatch>:




static void LCD_vidLatch(u8 Copy_u8Data)
{
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	6d 97       	sbiw	r28, 0x1d	; 29
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	de bf       	out	0x3e, r29	; 62
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	cd bf       	out	0x3d, r28	; 61
    1afa:	8d 8f       	std	Y+29, r24	; 0x1d
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    1afc:	82 e0       	ldi	r24, 0x02	; 2
    1afe:	61 e0       	ldi	r22, 0x01	; 1
    1b00:	40 e0       	ldi	r20, 0x00	; 0
    1b02:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1b06:	82 e0       	ldi	r24, 0x02	; 2
    1b08:	62 e0       	ldi	r22, 0x02	; 2
    1b0a:	40 e0       	ldi	r20, 0x00	; 0
    1b0c:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    1b10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b12:	98 2f       	mov	r25, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	99 27       	eor	r25, r25
    1b18:	99 1f       	adc	r25, r25
    1b1a:	83 e0       	ldi	r24, 0x03	; 3
    1b1c:	67 e0       	ldi	r22, 0x07	; 7
    1b1e:	49 2f       	mov	r20, r25
    1b20:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    1b24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b26:	82 95       	swap	r24
    1b28:	86 95       	lsr	r24
    1b2a:	86 95       	lsr	r24
    1b2c:	83 70       	andi	r24, 0x03	; 3
    1b2e:	98 2f       	mov	r25, r24
    1b30:	91 70       	andi	r25, 0x01	; 1
    1b32:	83 e0       	ldi	r24, 0x03	; 3
    1b34:	66 e0       	ldi	r22, 0x06	; 6
    1b36:	49 2f       	mov	r20, r25
    1b38:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    1b3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b3e:	82 95       	swap	r24
    1b40:	86 95       	lsr	r24
    1b42:	87 70       	andi	r24, 0x07	; 7
    1b44:	98 2f       	mov	r25, r24
    1b46:	91 70       	andi	r25, 0x01	; 1
    1b48:	83 e0       	ldi	r24, 0x03	; 3
    1b4a:	65 e0       	ldi	r22, 0x05	; 5
    1b4c:	49 2f       	mov	r20, r25
    1b4e:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    1b52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b54:	82 95       	swap	r24
    1b56:	8f 70       	andi	r24, 0x0F	; 15
    1b58:	98 2f       	mov	r25, r24
    1b5a:	91 70       	andi	r25, 0x01	; 1
    1b5c:	83 e0       	ldi	r24, 0x03	; 3
    1b5e:	64 e0       	ldi	r22, 0x04	; 4
    1b60:	49 2f       	mov	r20, r25
    1b62:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Data>>3)&1));
    1b66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b68:	86 95       	lsr	r24
    1b6a:	86 95       	lsr	r24
    1b6c:	86 95       	lsr	r24
    1b6e:	98 2f       	mov	r25, r24
    1b70:	91 70       	andi	r25, 0x01	; 1
    1b72:	83 e0       	ldi	r24, 0x03	; 3
    1b74:	63 e0       	ldi	r22, 0x03	; 3
    1b76:	49 2f       	mov	r20, r25
    1b78:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
    1b7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b7e:	86 95       	lsr	r24
    1b80:	86 95       	lsr	r24
    1b82:	98 2f       	mov	r25, r24
    1b84:	91 70       	andi	r25, 0x01	; 1
    1b86:	83 e0       	ldi	r24, 0x03	; 3
    1b88:	62 e0       	ldi	r22, 0x02	; 2
    1b8a:	49 2f       	mov	r20, r25
    1b8c:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
    1b90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b92:	86 95       	lsr	r24
    1b94:	98 2f       	mov	r25, r24
    1b96:	91 70       	andi	r25, 0x01	; 1
    1b98:	83 e0       	ldi	r24, 0x03	; 3
    1b9a:	61 e0       	ldi	r22, 0x01	; 1
    1b9c:	49 2f       	mov	r20, r25
    1b9e:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));
    1ba2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ba4:	98 2f       	mov	r25, r24
    1ba6:	91 70       	andi	r25, 0x01	; 1
    1ba8:	83 e0       	ldi	r24, 0x03	; 3
    1baa:	60 e0       	ldi	r22, 0x00	; 0
    1bac:	49 2f       	mov	r20, r25
    1bae:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>1)&1));
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>0)&1));
#endif

	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1bb2:	82 e0       	ldi	r24, 0x02	; 2
    1bb4:	62 e0       	ldi	r22, 0x02	; 2
    1bb6:	41 e0       	ldi	r20, 0x01	; 1
    1bb8:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a0 e2       	ldi	r26, 0x20	; 32
    1bc2:	b1 e4       	ldi	r27, 0x41	; 65
    1bc4:	89 8f       	std	Y+25, r24	; 0x19
    1bc6:	9a 8f       	std	Y+26, r25	; 0x1a
    1bc8:	ab 8f       	std	Y+27, r26	; 0x1b
    1bca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bcc:	69 8d       	ldd	r22, Y+25	; 0x19
    1bce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	4a ef       	ldi	r20, 0xFA	; 250
    1bda:	54 e4       	ldi	r21, 0x44	; 68
    1bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	8d 8b       	std	Y+21, r24	; 0x15
    1be6:	9e 8b       	std	Y+22, r25	; 0x16
    1be8:	af 8b       	std	Y+23, r26	; 0x17
    1bea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bec:	6d 89       	ldd	r22, Y+21	; 0x15
    1bee:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e8       	ldi	r20, 0x80	; 128
    1bfa:	5f e3       	ldi	r21, 0x3F	; 63
    1bfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c00:	88 23       	and	r24, r24
    1c02:	2c f4       	brge	.+10     	; 0x1c0e <LCD_vidLatch+0x128>
		__ticks = 1;
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	9c 8b       	std	Y+20, r25	; 0x14
    1c0a:	8b 8b       	std	Y+19, r24	; 0x13
    1c0c:	3f c0       	rjmp	.+126    	; 0x1c8c <LCD_vidLatch+0x1a6>
	else if (__tmp > 65535)
    1c0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c10:	7e 89       	ldd	r23, Y+22	; 0x16
    1c12:	8f 89       	ldd	r24, Y+23	; 0x17
    1c14:	98 8d       	ldd	r25, Y+24	; 0x18
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	3f ef       	ldi	r19, 0xFF	; 255
    1c1a:	4f e7       	ldi	r20, 0x7F	; 127
    1c1c:	57 e4       	ldi	r21, 0x47	; 71
    1c1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c22:	18 16       	cp	r1, r24
    1c24:	4c f5       	brge	.+82     	; 0x1c78 <LCD_vidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c26:	69 8d       	ldd	r22, Y+25	; 0x19
    1c28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e2       	ldi	r20, 0x20	; 32
    1c34:	51 e4       	ldi	r21, 0x41	; 65
    1c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	bc 01       	movw	r22, r24
    1c40:	cd 01       	movw	r24, r26
    1c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9c 8b       	std	Y+20, r25	; 0x14
    1c4c:	8b 8b       	std	Y+19, r24	; 0x13
    1c4e:	0f c0       	rjmp	.+30     	; 0x1c6e <LCD_vidLatch+0x188>
    1c50:	88 ec       	ldi	r24, 0xC8	; 200
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	9a 8b       	std	Y+18, r25	; 0x12
    1c56:	89 8b       	std	Y+17, r24	; 0x11
    1c58:	89 89       	ldd	r24, Y+17	; 0x11
    1c5a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <LCD_vidLatch+0x176>
    1c60:	9a 8b       	std	Y+18, r25	; 0x12
    1c62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c64:	8b 89       	ldd	r24, Y+19	; 0x13
    1c66:	9c 89       	ldd	r25, Y+20	; 0x14
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	9c 8b       	std	Y+20, r25	; 0x14
    1c6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c70:	9c 89       	ldd	r25, Y+20	; 0x14
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	69 f7       	brne	.-38     	; 0x1c50 <LCD_vidLatch+0x16a>
    1c76:	14 c0       	rjmp	.+40     	; 0x1ca0 <LCD_vidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c78:	6d 89       	ldd	r22, Y+21	; 0x15
    1c7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	9c 8b       	std	Y+20, r25	; 0x14
    1c8a:	8b 8b       	std	Y+19, r24	; 0x13
    1c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c90:	98 8b       	std	Y+16, r25	; 0x10
    1c92:	8f 87       	std	Y+15, r24	; 0x0f
    1c94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c96:	98 89       	ldd	r25, Y+16	; 0x10
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <LCD_vidLatch+0x1b2>
    1c9c:	98 8b       	std	Y+16, r25	; 0x10
    1c9e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1ca0:	82 e0       	ldi	r24, 0x02	; 2
    1ca2:	62 e0       	ldi	r22, 0x02	; 2
    1ca4:	40 e0       	ldi	r20, 0x00	; 0
    1ca6:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	a0 e2       	ldi	r26, 0x20	; 32
    1cb0:	b1 e4       	ldi	r27, 0x41	; 65
    1cb2:	8b 87       	std	Y+11, r24	; 0x0b
    1cb4:	9c 87       	std	Y+12, r25	; 0x0c
    1cb6:	ad 87       	std	Y+13, r26	; 0x0d
    1cb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	4a ef       	ldi	r20, 0xFA	; 250
    1cc8:	54 e4       	ldi	r21, 0x44	; 68
    1cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	8f 83       	std	Y+7, r24	; 0x07
    1cd4:	98 87       	std	Y+8, r25	; 0x08
    1cd6:	a9 87       	std	Y+9, r26	; 0x09
    1cd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cda:	6f 81       	ldd	r22, Y+7	; 0x07
    1cdc:	78 85       	ldd	r23, Y+8	; 0x08
    1cde:	89 85       	ldd	r24, Y+9	; 0x09
    1ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e8       	ldi	r20, 0x80	; 128
    1ce8:	5f e3       	ldi	r21, 0x3F	; 63
    1cea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cee:	88 23       	and	r24, r24
    1cf0:	2c f4       	brge	.+10     	; 0x1cfc <LCD_vidLatch+0x216>
		__ticks = 1;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9e 83       	std	Y+6, r25	; 0x06
    1cf8:	8d 83       	std	Y+5, r24	; 0x05
    1cfa:	3f c0       	rjmp	.+126    	; 0x1d7a <LCD_vidLatch+0x294>
	else if (__tmp > 65535)
    1cfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cfe:	78 85       	ldd	r23, Y+8	; 0x08
    1d00:	89 85       	ldd	r24, Y+9	; 0x09
    1d02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	3f ef       	ldi	r19, 0xFF	; 255
    1d08:	4f e7       	ldi	r20, 0x7F	; 127
    1d0a:	57 e4       	ldi	r21, 0x47	; 71
    1d0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d10:	18 16       	cp	r1, r24
    1d12:	4c f5       	brge	.+82     	; 0x1d66 <LCD_vidLatch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e2       	ldi	r20, 0x20	; 32
    1d22:	51 e4       	ldi	r21, 0x41	; 65
    1d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	bc 01       	movw	r22, r24
    1d2e:	cd 01       	movw	r24, r26
    1d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	9e 83       	std	Y+6, r25	; 0x06
    1d3a:	8d 83       	std	Y+5, r24	; 0x05
    1d3c:	0f c0       	rjmp	.+30     	; 0x1d5c <LCD_vidLatch+0x276>
    1d3e:	88 ec       	ldi	r24, 0xC8	; 200
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	9c 83       	std	Y+4, r25	; 0x04
    1d44:	8b 83       	std	Y+3, r24	; 0x03
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <LCD_vidLatch+0x264>
    1d4e:	9c 83       	std	Y+4, r25	; 0x04
    1d50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d52:	8d 81       	ldd	r24, Y+5	; 0x05
    1d54:	9e 81       	ldd	r25, Y+6	; 0x06
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	9e 83       	std	Y+6, r25	; 0x06
    1d5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	69 f7       	brne	.-38     	; 0x1d3e <LCD_vidLatch+0x258>
    1d64:	14 c0       	rjmp	.+40     	; 0x1d8e <LCD_vidLatch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d66:	6f 81       	ldd	r22, Y+7	; 0x07
    1d68:	78 85       	ldd	r23, Y+8	; 0x08
    1d6a:	89 85       	ldd	r24, Y+9	; 0x09
    1d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	9e 83       	std	Y+6, r25	; 0x06
    1d78:	8d 83       	std	Y+5, r24	; 0x05
    1d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7e:	9a 83       	std	Y+2, r25	; 0x02
    1d80:	89 83       	std	Y+1, r24	; 0x01
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	9a 81       	ldd	r25, Y+2	; 0x02
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <LCD_vidLatch+0x2a0>
    1d8a:	9a 83       	std	Y+2, r25	; 0x02
    1d8c:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(10);
}
    1d8e:	6d 96       	adiw	r28, 0x1d	; 29
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <LCD_invidSendCommend>:


static inline void LCD_invidSendCommend(u8 Copy_u8Command)
{
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
    1da8:	2f 97       	sbiw	r28, 0x0f	; 15
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	de bf       	out	0x3e, r29	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	cd bf       	out	0x3d, r28	; 61
    1db4:	8f 87       	std	Y+15, r24	; 0x0f
	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    1db6:	82 e0       	ldi	r24, 0x02	; 2
    1db8:	60 e0       	ldi	r22, 0x00	; 0
    1dba:	40 e0       	ldi	r20, 0x00	; 0
    1dbc:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    1dc0:	82 e0       	ldi	r24, 0x02	; 2
    1dc2:	61 e0       	ldi	r22, 0x01	; 1
    1dc4:	40 e0       	ldi	r20, 0x00	; 0
    1dc6:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1dca:	82 e0       	ldi	r24, 0x02	; 2
    1dcc:	62 e0       	ldi	r22, 0x02	; 2
    1dce:	40 e0       	ldi	r20, 0x00	; 0
    1dd0:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    1dd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dd6:	98 2f       	mov	r25, r24
    1dd8:	99 1f       	adc	r25, r25
    1dda:	99 27       	eor	r25, r25
    1ddc:	99 1f       	adc	r25, r25
    1dde:	83 e0       	ldi	r24, 0x03	; 3
    1de0:	67 e0       	ldi	r22, 0x07	; 7
    1de2:	49 2f       	mov	r20, r25
    1de4:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    1de8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dea:	82 95       	swap	r24
    1dec:	86 95       	lsr	r24
    1dee:	86 95       	lsr	r24
    1df0:	83 70       	andi	r24, 0x03	; 3
    1df2:	98 2f       	mov	r25, r24
    1df4:	91 70       	andi	r25, 0x01	; 1
    1df6:	83 e0       	ldi	r24, 0x03	; 3
    1df8:	66 e0       	ldi	r22, 0x06	; 6
    1dfa:	49 2f       	mov	r20, r25
    1dfc:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    1e00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e02:	82 95       	swap	r24
    1e04:	86 95       	lsr	r24
    1e06:	87 70       	andi	r24, 0x07	; 7
    1e08:	98 2f       	mov	r25, r24
    1e0a:	91 70       	andi	r25, 0x01	; 1
    1e0c:	83 e0       	ldi	r24, 0x03	; 3
    1e0e:	65 e0       	ldi	r22, 0x05	; 5
    1e10:	49 2f       	mov	r20, r25
    1e12:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    1e16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e18:	82 95       	swap	r24
    1e1a:	8f 70       	andi	r24, 0x0F	; 15
    1e1c:	98 2f       	mov	r25, r24
    1e1e:	91 70       	andi	r25, 0x01	; 1
    1e20:	83 e0       	ldi	r24, 0x03	; 3
    1e22:	64 e0       	ldi	r22, 0x04	; 4
    1e24:	49 2f       	mov	r20, r25
    1e26:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
#if LCD_MODE == EIGHT_BIT
	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Command>>3)&1));
    1e2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e2c:	86 95       	lsr	r24
    1e2e:	86 95       	lsr	r24
    1e30:	86 95       	lsr	r24
    1e32:	98 2f       	mov	r25, r24
    1e34:	91 70       	andi	r25, 0x01	; 1
    1e36:	83 e0       	ldi	r24, 0x03	; 3
    1e38:	63 e0       	ldi	r22, 0x03	; 3
    1e3a:	49 2f       	mov	r20, r25
    1e3c:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Command>>2)&1));
    1e40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e42:	86 95       	lsr	r24
    1e44:	86 95       	lsr	r24
    1e46:	98 2f       	mov	r25, r24
    1e48:	91 70       	andi	r25, 0x01	; 1
    1e4a:	83 e0       	ldi	r24, 0x03	; 3
    1e4c:	62 e0       	ldi	r22, 0x02	; 2
    1e4e:	49 2f       	mov	r20, r25
    1e50:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Command>>1)&1));
    1e54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e56:	86 95       	lsr	r24
    1e58:	98 2f       	mov	r25, r24
    1e5a:	91 70       	andi	r25, 0x01	; 1
    1e5c:	83 e0       	ldi	r24, 0x03	; 3
    1e5e:	61 e0       	ldi	r22, 0x01	; 1
    1e60:	49 2f       	mov	r20, r25
    1e62:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Command>>0)&1));
    1e66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e68:	98 2f       	mov	r25, r24
    1e6a:	91 70       	andi	r25, 0x01	; 1
    1e6c:	83 e0       	ldi	r24, 0x03	; 3
    1e6e:	60 e0       	ldi	r22, 0x00	; 0
    1e70:	49 2f       	mov	r20, r25
    1e72:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>2)&1));
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>1)&1));
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>0)&1));

#endif
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1e76:	82 e0       	ldi	r24, 0x02	; 2
    1e78:	62 e0       	ldi	r22, 0x02	; 2
    1e7a:	41 e0       	ldi	r20, 0x01	; 1
    1e7c:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	a0 e2       	ldi	r26, 0x20	; 32
    1e86:	b1 e4       	ldi	r27, 0x41	; 65
    1e88:	8b 87       	std	Y+11, r24	; 0x0b
    1e8a:	9c 87       	std	Y+12, r25	; 0x0c
    1e8c:	ad 87       	std	Y+13, r26	; 0x0d
    1e8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	4a ef       	ldi	r20, 0xFA	; 250
    1e9e:	54 e4       	ldi	r21, 0x44	; 68
    1ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	8f 83       	std	Y+7, r24	; 0x07
    1eaa:	98 87       	std	Y+8, r25	; 0x08
    1eac:	a9 87       	std	Y+9, r26	; 0x09
    1eae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb2:	78 85       	ldd	r23, Y+8	; 0x08
    1eb4:	89 85       	ldd	r24, Y+9	; 0x09
    1eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e8       	ldi	r20, 0x80	; 128
    1ebe:	5f e3       	ldi	r21, 0x3F	; 63
    1ec0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ec4:	88 23       	and	r24, r24
    1ec6:	2c f4       	brge	.+10     	; 0x1ed2 <LCD_invidSendCommend+0x132>
		__ticks = 1;
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	9e 83       	std	Y+6, r25	; 0x06
    1ece:	8d 83       	std	Y+5, r24	; 0x05
    1ed0:	3f c0       	rjmp	.+126    	; 0x1f50 <LCD_invidSendCommend+0x1b0>
	else if (__tmp > 65535)
    1ed2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed4:	78 85       	ldd	r23, Y+8	; 0x08
    1ed6:	89 85       	ldd	r24, Y+9	; 0x09
    1ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	3f ef       	ldi	r19, 0xFF	; 255
    1ede:	4f e7       	ldi	r20, 0x7F	; 127
    1ee0:	57 e4       	ldi	r21, 0x47	; 71
    1ee2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ee6:	18 16       	cp	r1, r24
    1ee8:	4c f5       	brge	.+82     	; 0x1f3c <LCD_invidSendCommend+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e2       	ldi	r20, 0x20	; 32
    1ef8:	51 e4       	ldi	r21, 0x41	; 65
    1efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	bc 01       	movw	r22, r24
    1f04:	cd 01       	movw	r24, r26
    1f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	9e 83       	std	Y+6, r25	; 0x06
    1f10:	8d 83       	std	Y+5, r24	; 0x05
    1f12:	0f c0       	rjmp	.+30     	; 0x1f32 <LCD_invidSendCommend+0x192>
    1f14:	88 ec       	ldi	r24, 0xC8	; 200
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	9c 83       	std	Y+4, r25	; 0x04
    1f1a:	8b 83       	std	Y+3, r24	; 0x03
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	f1 f7       	brne	.-4      	; 0x1f20 <LCD_invidSendCommend+0x180>
    1f24:	9c 83       	std	Y+4, r25	; 0x04
    1f26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f28:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	9e 83       	std	Y+6, r25	; 0x06
    1f30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f32:	8d 81       	ldd	r24, Y+5	; 0x05
    1f34:	9e 81       	ldd	r25, Y+6	; 0x06
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	69 f7       	brne	.-38     	; 0x1f14 <LCD_invidSendCommend+0x174>
    1f3a:	14 c0       	rjmp	.+40     	; 0x1f64 <LCD_invidSendCommend+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3e:	78 85       	ldd	r23, Y+8	; 0x08
    1f40:	89 85       	ldd	r24, Y+9	; 0x09
    1f42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	9e 83       	std	Y+6, r25	; 0x06
    1f4e:	8d 83       	std	Y+5, r24	; 0x05
    1f50:	8d 81       	ldd	r24, Y+5	; 0x05
    1f52:	9e 81       	ldd	r25, Y+6	; 0x06
    1f54:	9a 83       	std	Y+2, r25	; 0x02
    1f56:	89 83       	std	Y+1, r24	; 0x01
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	f1 f7       	brne	.-4      	; 0x1f5c <LCD_invidSendCommend+0x1bc>
    1f60:	9a 83       	std	Y+2, r25	; 0x02
    1f62:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1f64:	82 e0       	ldi	r24, 0x02	; 2
    1f66:	62 e0       	ldi	r22, 0x02	; 2
    1f68:	40 e0       	ldi	r20, 0x00	; 0
    1f6a:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
}
    1f6e:	2f 96       	adiw	r28, 0x0f	; 15
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	cd bf       	out	0x3d, r28	; 61
    1f7a:	cf 91       	pop	r28
    1f7c:	df 91       	pop	r29
    1f7e:	08 95       	ret

00001f80 <Keypad_enuInit>:
 */
#include "Keypad_interface.h"


ES_t Keypad_enuInit(void)
{
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	0f 92       	push	r0
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    1f8a:	19 82       	std	Y+1, r1	; 0x01
	//set Columns pins Direction as OUTPUT
	Local_enuErrorState = DIO_enuSetPinDirection(Keypad_C1PORT,Keypad_C1PIN,DIO_u8OUTPUT);
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	64 e0       	ldi	r22, 0x04	; 4
    1f90:	41 e0       	ldi	r20, 0x01	; 1
    1f92:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_enuSetPinDirection>
    1f96:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState = DIO_enuSetPinDirection(Keypad_C2PORT,Keypad_C2PIN,DIO_u8OUTPUT);
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	65 e0       	ldi	r22, 0x05	; 5
    1f9c:	41 e0       	ldi	r20, 0x01	; 1
    1f9e:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_enuSetPinDirection>
    1fa2:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState = DIO_enuSetPinDirection(Keypad_C3PORT,Keypad_C3PIN,DIO_u8OUTPUT);
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	66 e0       	ldi	r22, 0x06	; 6
    1fa8:	41 e0       	ldi	r20, 0x01	; 1
    1faa:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_enuSetPinDirection>
    1fae:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState = DIO_enuSetPinDirection(Keypad_C4PORT,Keypad_C4PIN,DIO_u8OUTPUT);
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	67 e0       	ldi	r22, 0x07	; 7
    1fb4:	41 e0       	ldi	r20, 0x01	; 1
    1fb6:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_enuSetPinDirection>
    1fba:	89 83       	std	Y+1, r24	; 0x01
	//Set Rows Pins Direction as INPUT
	Local_enuErrorState = DIO_enuSetPinDirection(Keypad_R1PORT,Keypad_R1PIN,DIO_u8INPUT);
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	60 e0       	ldi	r22, 0x00	; 0
    1fc0:	40 e0       	ldi	r20, 0x00	; 0
    1fc2:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_enuSetPinDirection>
    1fc6:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState = DIO_enuSetPinDirection(Keypad_R2PORT,Keypad_R2PIN,DIO_u8INPUT);
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	61 e0       	ldi	r22, 0x01	; 1
    1fcc:	40 e0       	ldi	r20, 0x00	; 0
    1fce:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_enuSetPinDirection>
    1fd2:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState = DIO_enuSetPinDirection(Keypad_R3PORT,Keypad_R3PIN,DIO_u8INPUT);
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	62 e0       	ldi	r22, 0x02	; 2
    1fd8:	40 e0       	ldi	r20, 0x00	; 0
    1fda:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_enuSetPinDirection>
    1fde:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState = DIO_enuSetPinDirection(Keypad_R4PORT,Keypad_R4PIN,DIO_u8INPUT);
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	63 e0       	ldi	r22, 0x03	; 3
    1fe4:	40 e0       	ldi	r20, 0x00	; 0
    1fe6:	0e 94 14 07 	call	0xe28	; 0xe28 <DIO_enuSetPinDirection>
    1fea:	89 83       	std	Y+1, r24	; 0x01
	//Set Columns Value as High
	Local_enuErrorState = DIO_enuSetPinValue(Keypad_C1PORT,Keypad_C1PIN,DIO_u8HIGH);
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	64 e0       	ldi	r22, 0x04	; 4
    1ff0:	41 e0       	ldi	r20, 0x01	; 1
    1ff2:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
    1ff6:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState = DIO_enuSetPinValue(Keypad_C2PORT,Keypad_C2PIN,DIO_u8HIGH);
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	65 e0       	ldi	r22, 0x05	; 5
    1ffc:	41 e0       	ldi	r20, 0x01	; 1
    1ffe:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
    2002:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState = DIO_enuSetPinValue(Keypad_C3PORT,Keypad_C3PIN,DIO_u8HIGH);
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	66 e0       	ldi	r22, 0x06	; 6
    2008:	41 e0       	ldi	r20, 0x01	; 1
    200a:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
    200e:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState = DIO_enuSetPinValue(Keypad_C4PORT,Keypad_C4PIN,DIO_u8HIGH);
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	67 e0       	ldi	r22, 0x07	; 7
    2014:	41 e0       	ldi	r20, 0x01	; 1
    2016:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
    201a:	89 83       	std	Y+1, r24	; 0x01
	//Set Raws value As Pull up
	Local_enuErrorState = DIO_enuSetPinValue(Keypad_R1PORT,Keypad_R1PIN,DIO_u8PULL_UP);
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	60 e0       	ldi	r22, 0x00	; 0
    2020:	41 e0       	ldi	r20, 0x01	; 1
    2022:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
    2026:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState = DIO_enuSetPinValue(Keypad_R2PORT,Keypad_R2PIN,DIO_u8PULL_UP);
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	61 e0       	ldi	r22, 0x01	; 1
    202c:	41 e0       	ldi	r20, 0x01	; 1
    202e:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
    2032:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState = DIO_enuSetPinValue(Keypad_R3PORT,Keypad_R3PIN,DIO_u8PULL_UP);
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	62 e0       	ldi	r22, 0x02	; 2
    2038:	41 e0       	ldi	r20, 0x01	; 1
    203a:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
    203e:	89 83       	std	Y+1, r24	; 0x01
	Local_enuErrorState = DIO_enuSetPinValue(Keypad_R4PORT,Keypad_R4PIN,DIO_u8PULL_UP);
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	63 e0       	ldi	r22, 0x03	; 3
    2044:	41 e0       	ldi	r20, 0x01	; 1
    2046:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
    204a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    204c:	89 81       	ldd	r24, Y+1	; 0x01
}
    204e:	0f 90       	pop	r0
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	08 95       	ret

00002056 <Keypad_u8GetPressedkey>:
ES_t Keypad_u8GetPressedkey(u8 * Copy_pu8PressedKey)
{
    2056:	df 93       	push	r29
    2058:	cf 93       	push	r28
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
    205e:	6d 97       	sbiw	r28, 0x1d	; 29
    2060:	0f b6       	in	r0, 0x3f	; 63
    2062:	f8 94       	cli
    2064:	de bf       	out	0x3e, r29	; 62
    2066:	0f be       	out	0x3f, r0	; 63
    2068:	cd bf       	out	0x3d, r28	; 61
    206a:	9f 8b       	std	Y+23, r25	; 0x17
    206c:	8e 8b       	std	Y+22, r24	; 0x16
	ES_t Local_enuErrorState = ES_NOK;
    206e:	1c 82       	std	Y+4, r1	; 0x04
	if(Copy_pu8PressedKey != NULL)
    2070:	8e 89       	ldd	r24, Y+22	; 0x16
    2072:	9f 89       	ldd	r25, Y+23	; 0x17
    2074:	00 97       	sbiw	r24, 0x00	; 0
    2076:	09 f4       	brne	.+2      	; 0x207a <Keypad_u8GetPressedkey+0x24>
    2078:	ae c0       	rjmp	.+348    	; 0x21d6 <Keypad_u8GetPressedkey+0x180>
	{
	u8 Local_u8PressedKey = NOT_PRESSED , Col_Index , Row_Index , Local_u8pinState;
    207a:	84 e1       	ldi	r24, 0x14	; 20
    207c:	8b 83       	std	Y+3, r24	; 0x03
	* Copy_pu8PressedKey = NOT_PRESSED;
    207e:	ee 89       	ldd	r30, Y+22	; 0x16
    2080:	ff 89       	ldd	r31, Y+23	; 0x17
    2082:	84 e1       	ldi	r24, 0x14	; 20
    2084:	80 83       	st	Z, r24

	u8 Local_u8KPAD_ARR[ROW_NUM][COLUMN_NUM]=KPD_Arr_Val;
    2086:	ce 01       	movw	r24, r28
    2088:	06 96       	adiw	r24, 0x06	; 6
    208a:	9a 8f       	std	Y+26, r25	; 0x1a
    208c:	89 8f       	std	Y+25, r24	; 0x19
    208e:	e0 e7       	ldi	r30, 0x70	; 112
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	fc 8f       	std	Y+28, r31	; 0x1c
    2094:	eb 8f       	std	Y+27, r30	; 0x1b
    2096:	f0 e1       	ldi	r31, 0x10	; 16
    2098:	fd 8f       	std	Y+29, r31	; 0x1d
    209a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    209c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    209e:	00 80       	ld	r0, Z
    20a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20a4:	01 96       	adiw	r24, 0x01	; 1
    20a6:	9c 8f       	std	Y+28, r25	; 0x1c
    20a8:	8b 8f       	std	Y+27, r24	; 0x1b
    20aa:	e9 8d       	ldd	r30, Y+25	; 0x19
    20ac:	fa 8d       	ldd	r31, Y+26	; 0x1a
    20ae:	00 82       	st	Z, r0
    20b0:	89 8d       	ldd	r24, Y+25	; 0x19
    20b2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    20b4:	01 96       	adiw	r24, 0x01	; 1
    20b6:	9a 8f       	std	Y+26, r25	; 0x1a
    20b8:	89 8f       	std	Y+25, r24	; 0x19
    20ba:	9d 8d       	ldd	r25, Y+29	; 0x1d
    20bc:	91 50       	subi	r25, 0x01	; 1
    20be:	9d 8f       	std	Y+29, r25	; 0x1d
    20c0:	ed 8d       	ldd	r30, Y+29	; 0x1d
    20c2:	ee 23       	and	r30, r30
    20c4:	51 f7       	brne	.-44     	; 0x209a <Keypad_u8GetPressedkey+0x44>
	static u8 Local_u8ColPortArr[COLUMN_NUM]={Keypad_C1PORT,Keypad_C2PORT,Keypad_C3PORT,Keypad_C4PORT};

	static u8 Local_u8RowPinsArr[ROW_NUM]={Keypad_R1PIN, Keypad_R2PIN, Keypad_R3PIN, Keypad_R4PIN};
	static u8 Local_u8RowPortArr[ROW_NUM]={Keypad_R1PORT,Keypad_R2PORT,Keypad_R3PORT,Keypad_R4PORT};

	for(Col_Index=0;Col_Index<COLUMN_NUM;Col_Index++)
    20c6:	1a 82       	std	Y+2, r1	; 0x02
    20c8:	81 c0       	rjmp	.+258    	; 0x21cc <Keypad_u8GetPressedkey+0x176>
	{
		//Activate Current Columns
		Local_enuErrorState = DIO_enuSetPinValue(Local_u8ColPortArr[Col_Index],Local_u8ColPinsArr[Col_Index],DIO_u8LOW);
    20ca:	8a 81       	ldd	r24, Y+2	; 0x02
    20cc:	88 2f       	mov	r24, r24
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	fc 01       	movw	r30, r24
    20d2:	ec 57       	subi	r30, 0x7C	; 124
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	20 81       	ld	r18, Z
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	88 2f       	mov	r24, r24
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	fc 01       	movw	r30, r24
    20e0:	e4 59       	subi	r30, 0x94	; 148
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	90 81       	ld	r25, Z
    20e6:	82 2f       	mov	r24, r18
    20e8:	69 2f       	mov	r22, r25
    20ea:	40 e0       	ldi	r20, 0x00	; 0
    20ec:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
    20f0:	8c 83       	std	Y+4, r24	; 0x04
		for(Row_Index=0;Row_Index<ROW_NUM;Row_Index++)
    20f2:	19 82       	std	Y+1, r1	; 0x01
    20f4:	51 c0       	rjmp	.+162    	; 0x2198 <Keypad_u8GetPressedkey+0x142>
		{
			DIO_enuGetPinValue(Local_u8RowPortArr[Row_Index],Local_u8RowPinsArr[Row_Index],&Local_u8pinState);
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
    20f8:	88 2f       	mov	r24, r24
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	fc 01       	movw	r30, r24
    20fe:	e0 58       	subi	r30, 0x80	; 128
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	40 81       	ld	r20, Z
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	88 2f       	mov	r24, r24
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	fc 01       	movw	r30, r24
    210c:	e8 59       	subi	r30, 0x98	; 152
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	90 81       	ld	r25, Z
    2112:	9e 01       	movw	r18, r28
    2114:	2b 5f       	subi	r18, 0xFB	; 251
    2116:	3f 4f       	sbci	r19, 0xFF	; 255
    2118:	84 2f       	mov	r24, r20
    211a:	69 2f       	mov	r22, r25
    211c:	a9 01       	movw	r20, r18
    211e:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_enuGetPinValue>
			//Check is switch is pressed
			if(DIO_u8LOW == Local_u8pinState )
    2122:	8d 81       	ldd	r24, Y+5	; 0x05
    2124:	88 23       	and	r24, r24
    2126:	a9 f5       	brne	.+106    	; 0x2192 <Keypad_u8GetPressedkey+0x13c>
    2128:	16 c0       	rjmp	.+44     	; 0x2156 <Keypad_u8GetPressedkey+0x100>
			{
				//Polling --> Busy waiting until key is released
				while(DIO_u8LOW == Local_u8pinState)
				{
					DIO_enuGetPinValue(Local_u8RowPortArr[Row_Index],Local_u8RowPinsArr[Row_Index],&Local_u8pinState);
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	88 2f       	mov	r24, r24
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	fc 01       	movw	r30, r24
    2132:	e0 58       	subi	r30, 0x80	; 128
    2134:	ff 4f       	sbci	r31, 0xFF	; 255
    2136:	40 81       	ld	r20, Z
    2138:	89 81       	ldd	r24, Y+1	; 0x01
    213a:	88 2f       	mov	r24, r24
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	fc 01       	movw	r30, r24
    2140:	e8 59       	subi	r30, 0x98	; 152
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	90 81       	ld	r25, Z
    2146:	9e 01       	movw	r18, r28
    2148:	2b 5f       	subi	r18, 0xFB	; 251
    214a:	3f 4f       	sbci	r19, 0xFF	; 255
    214c:	84 2f       	mov	r24, r20
    214e:	69 2f       	mov	r22, r25
    2150:	a9 01       	movw	r20, r18
    2152:	0e 94 74 09 	call	0x12e8	; 0x12e8 <DIO_enuGetPinValue>
			DIO_enuGetPinValue(Local_u8RowPortArr[Row_Index],Local_u8RowPinsArr[Row_Index],&Local_u8pinState);
			//Check is switch is pressed
			if(DIO_u8LOW == Local_u8pinState )
			{
				//Polling --> Busy waiting until key is released
				while(DIO_u8LOW == Local_u8pinState)
    2156:	8d 81       	ldd	r24, Y+5	; 0x05
    2158:	88 23       	and	r24, r24
    215a:	39 f3       	breq	.-50     	; 0x212a <Keypad_u8GetPressedkey+0xd4>
				{
					DIO_enuGetPinValue(Local_u8RowPortArr[Row_Index],Local_u8RowPinsArr[Row_Index],&Local_u8pinState);
				}
				*Copy_pu8PressedKey = Local_u8KPAD_ARR[Row_Index][Col_Index];
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	48 2f       	mov	r20, r24
    2166:	50 e0       	ldi	r21, 0x00	; 0
    2168:	22 0f       	add	r18, r18
    216a:	33 1f       	adc	r19, r19
    216c:	22 0f       	add	r18, r18
    216e:	33 1f       	adc	r19, r19
    2170:	ce 01       	movw	r24, r28
    2172:	01 96       	adiw	r24, 0x01	; 1
    2174:	82 0f       	add	r24, r18
    2176:	93 1f       	adc	r25, r19
    2178:	84 0f       	add	r24, r20
    217a:	95 1f       	adc	r25, r21
    217c:	fc 01       	movw	r30, r24
    217e:	35 96       	adiw	r30, 0x05	; 5
    2180:	80 81       	ld	r24, Z
    2182:	ee 89       	ldd	r30, Y+22	; 0x16
    2184:	ff 89       	ldd	r31, Y+23	; 0x17
    2186:	80 83       	st	Z, r24
				return Local_enuErrorState = ES_OK;
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	8c 83       	std	Y+4, r24	; 0x04
    218c:	fc 81       	ldd	r31, Y+4	; 0x04
    218e:	f8 8f       	std	Y+24, r31	; 0x18
    2190:	26 c0       	rjmp	.+76     	; 0x21de <Keypad_u8GetPressedkey+0x188>

	for(Col_Index=0;Col_Index<COLUMN_NUM;Col_Index++)
	{
		//Activate Current Columns
		Local_enuErrorState = DIO_enuSetPinValue(Local_u8ColPortArr[Col_Index],Local_u8ColPinsArr[Col_Index],DIO_u8LOW);
		for(Row_Index=0;Row_Index<ROW_NUM;Row_Index++)
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	8f 5f       	subi	r24, 0xFF	; 255
    2196:	89 83       	std	Y+1, r24	; 0x01
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	84 30       	cpi	r24, 0x04	; 4
    219c:	08 f4       	brcc	.+2      	; 0x21a0 <Keypad_u8GetPressedkey+0x14a>
    219e:	ab cf       	rjmp	.-170    	; 0x20f6 <Keypad_u8GetPressedkey+0xa0>
				return Local_enuErrorState = ES_OK;

			}
		}
		//Deactivate Current column
		DIO_enuSetPinValue(Local_u8ColPortArr[Col_Index],Local_u8ColPinsArr[Col_Index],DIO_u8HIGH);
    21a0:	8a 81       	ldd	r24, Y+2	; 0x02
    21a2:	88 2f       	mov	r24, r24
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	fc 01       	movw	r30, r24
    21a8:	ec 57       	subi	r30, 0x7C	; 124
    21aa:	ff 4f       	sbci	r31, 0xFF	; 255
    21ac:	20 81       	ld	r18, Z
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	88 2f       	mov	r24, r24
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	fc 01       	movw	r30, r24
    21b6:	e4 59       	subi	r30, 0x94	; 148
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	90 81       	ld	r25, Z
    21bc:	82 2f       	mov	r24, r18
    21be:	69 2f       	mov	r22, r25
    21c0:	41 e0       	ldi	r20, 0x01	; 1
    21c2:	0e 94 fe 07 	call	0xffc	; 0xffc <DIO_enuSetPinValue>
	static u8 Local_u8ColPortArr[COLUMN_NUM]={Keypad_C1PORT,Keypad_C2PORT,Keypad_C3PORT,Keypad_C4PORT};

	static u8 Local_u8RowPinsArr[ROW_NUM]={Keypad_R1PIN, Keypad_R2PIN, Keypad_R3PIN, Keypad_R4PIN};
	static u8 Local_u8RowPortArr[ROW_NUM]={Keypad_R1PORT,Keypad_R2PORT,Keypad_R3PORT,Keypad_R4PORT};

	for(Col_Index=0;Col_Index<COLUMN_NUM;Col_Index++)
    21c6:	8a 81       	ldd	r24, Y+2	; 0x02
    21c8:	8f 5f       	subi	r24, 0xFF	; 255
    21ca:	8a 83       	std	Y+2, r24	; 0x02
    21cc:	8a 81       	ldd	r24, Y+2	; 0x02
    21ce:	84 30       	cpi	r24, 0x04	; 4
    21d0:	08 f4       	brcc	.+2      	; 0x21d4 <Keypad_u8GetPressedkey+0x17e>
    21d2:	7b cf       	rjmp	.-266    	; 0x20ca <Keypad_u8GetPressedkey+0x74>
    21d4:	02 c0       	rjmp	.+4      	; 0x21da <Keypad_u8GetPressedkey+0x184>
		DIO_enuSetPinValue(Local_u8ColPortArr[Col_Index],Local_u8ColPinsArr[Col_Index],DIO_u8HIGH);
	}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    21d6:	82 e0       	ldi	r24, 0x02	; 2
    21d8:	8c 83       	std	Y+4, r24	; 0x04
	}

	return Local_enuErrorState;
    21da:	8c 81       	ldd	r24, Y+4	; 0x04
    21dc:	88 8f       	std	Y+24, r24	; 0x18
    21de:	88 8d       	ldd	r24, Y+24	; 0x18
}
    21e0:	6d 96       	adiw	r28, 0x1d	; 29
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	f8 94       	cli
    21e6:	de bf       	out	0x3e, r29	; 62
    21e8:	0f be       	out	0x3f, r0	; 63
    21ea:	cd bf       	out	0x3d, r28	; 61
    21ec:	cf 91       	pop	r28
    21ee:	df 91       	pop	r29
    21f0:	08 95       	ret

000021f2 <CreateStack>:

#include "Claculator.h"


void CreateStack (Stack *Ps){
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <CreateStack+0x6>
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
    21fc:	9a 83       	std	Y+2, r25	; 0x02
    21fe:	89 83       	std	Y+1, r24	; 0x01

    Ps->top = 0;
    2200:	e9 81       	ldd	r30, Y+1	; 0x01
    2202:	fa 81       	ldd	r31, Y+2	; 0x02
    2204:	11 82       	std	Z+1, r1	; 0x01
    2206:	10 82       	st	Z, r1
}
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <Push>:


void Push(Stack *ps,StackEntry element)
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	00 d0       	rcall	.+0      	; 0x2218 <Push+0x6>
    2218:	00 d0       	rcall	.+0      	; 0x221a <Push+0x8>
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	9a 83       	std	Y+2, r25	; 0x02
    2220:	89 83       	std	Y+1, r24	; 0x01
    2222:	7c 83       	std	Y+4, r23	; 0x04
    2224:	6b 83       	std	Y+3, r22	; 0x03

    ps->Array[ps->top] = element;
    2226:	e9 81       	ldd	r30, Y+1	; 0x01
    2228:	fa 81       	ldd	r31, Y+2	; 0x02
    222a:	80 81       	ld	r24, Z
    222c:	91 81       	ldd	r25, Z+1	; 0x01
    222e:	29 81       	ldd	r18, Y+1	; 0x01
    2230:	3a 81       	ldd	r19, Y+2	; 0x02
    2232:	01 96       	adiw	r24, 0x01	; 1
    2234:	88 0f       	add	r24, r24
    2236:	99 1f       	adc	r25, r25
    2238:	f9 01       	movw	r30, r18
    223a:	e8 0f       	add	r30, r24
    223c:	f9 1f       	adc	r31, r25
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	9c 81       	ldd	r25, Y+4	; 0x04
    2242:	91 83       	std	Z+1, r25	; 0x01
    2244:	80 83       	st	Z, r24
    ps->top=ps->top+1;
    2246:	e9 81       	ldd	r30, Y+1	; 0x01
    2248:	fa 81       	ldd	r31, Y+2	; 0x02
    224a:	80 81       	ld	r24, Z
    224c:	91 81       	ldd	r25, Z+1	; 0x01
    224e:	01 96       	adiw	r24, 0x01	; 1
    2250:	e9 81       	ldd	r30, Y+1	; 0x01
    2252:	fa 81       	ldd	r31, Y+2	; 0x02
    2254:	91 83       	std	Z+1, r25	; 0x01
    2256:	80 83       	st	Z, r24


}
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	0f 90       	pop	r0
    2260:	cf 91       	pop	r28
    2262:	df 91       	pop	r29
    2264:	08 95       	ret

00002266 <Pop>:


void Pop (Stack *Ps)
{
    2266:	df 93       	push	r29
    2268:	cf 93       	push	r28
    226a:	00 d0       	rcall	.+0      	; 0x226c <Pop+0x6>
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	9a 83       	std	Y+2, r25	; 0x02
    2272:	89 83       	std	Y+1, r24	; 0x01
    Ps->top--;
    2274:	e9 81       	ldd	r30, Y+1	; 0x01
    2276:	fa 81       	ldd	r31, Y+2	; 0x02
    2278:	80 81       	ld	r24, Z
    227a:	91 81       	ldd	r25, Z+1	; 0x01
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	e9 81       	ldd	r30, Y+1	; 0x01
    2280:	fa 81       	ldd	r31, Y+2	; 0x02
    2282:	91 83       	std	Z+1, r25	; 0x01
    2284:	80 83       	st	Z, r24

}
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <Stack_Empty>:


u8 Stack_Empty (Stack *Ps)
{
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	00 d0       	rcall	.+0      	; 0x2296 <Stack_Empty+0x6>
    2296:	0f 92       	push	r0
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	9a 83       	std	Y+2, r25	; 0x02
    229e:	89 83       	std	Y+1, r24	; 0x01

    return ( Ps->top == 0);
    22a0:	e9 81       	ldd	r30, Y+1	; 0x01
    22a2:	fa 81       	ldd	r31, Y+2	; 0x02
    22a4:	80 81       	ld	r24, Z
    22a6:	91 81       	ldd	r25, Z+1	; 0x01
    22a8:	1b 82       	std	Y+3, r1	; 0x03
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	11 f4       	brne	.+4      	; 0x22b2 <Stack_Empty+0x22>
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	8b 83       	std	Y+3, r24	; 0x03
    22b2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	cf 91       	pop	r28
    22bc:	df 91       	pop	r29
    22be:	08 95       	ret

000022c0 <Stack_Full>:



u8 Stack_Full (Stack *Ps)
{
    22c0:	df 93       	push	r29
    22c2:	cf 93       	push	r28
    22c4:	00 d0       	rcall	.+0      	; 0x22c6 <Stack_Full+0x6>
    22c6:	0f 92       	push	r0
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
    22cc:	9a 83       	std	Y+2, r25	; 0x02
    22ce:	89 83       	std	Y+1, r24	; 0x01
    return Ps->top == MAX_SIZE;
    22d0:	e9 81       	ldd	r30, Y+1	; 0x01
    22d2:	fa 81       	ldd	r31, Y+2	; 0x02
    22d4:	80 81       	ld	r24, Z
    22d6:	91 81       	ldd	r25, Z+1	; 0x01
    22d8:	1b 82       	std	Y+3, r1	; 0x03
    22da:	84 31       	cpi	r24, 0x14	; 20
    22dc:	91 05       	cpc	r25, r1
    22de:	11 f4       	brne	.+4      	; 0x22e4 <Stack_Full+0x24>
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	8b 83       	std	Y+3, r24	; 0x03
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	cf 91       	pop	r28
    22ee:	df 91       	pop	r29
    22f0:	08 95       	ret

000022f2 <Stack_Top>:



StackEntry Stack_Top (Stack *ps)
{
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	00 d0       	rcall	.+0      	; 0x22f8 <Stack_Top+0x6>
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    22fc:	9a 83       	std	Y+2, r25	; 0x02
    22fe:	89 83       	std	Y+1, r24	; 0x01
    return ps->Array[ps->top-1];
    2300:	e9 81       	ldd	r30, Y+1	; 0x01
    2302:	fa 81       	ldd	r31, Y+2	; 0x02
    2304:	80 81       	ld	r24, Z
    2306:	91 81       	ldd	r25, Z+1	; 0x01
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	29 81       	ldd	r18, Y+1	; 0x01
    230c:	3a 81       	ldd	r19, Y+2	; 0x02
    230e:	01 96       	adiw	r24, 0x01	; 1
    2310:	88 0f       	add	r24, r24
    2312:	99 1f       	adc	r25, r25
    2314:	f9 01       	movw	r30, r18
    2316:	e8 0f       	add	r30, r24
    2318:	f9 1f       	adc	r31, r25
    231a:	80 81       	ld	r24, Z
    231c:	91 81       	ldd	r25, Z+1	; 0x01
}
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	cf 91       	pop	r28
    2324:	df 91       	pop	r29
    2326:	08 95       	ret

00002328 <StackSize>:



u8 StackSize(Stack *Ps)
{
    2328:	df 93       	push	r29
    232a:	cf 93       	push	r28
    232c:	00 d0       	rcall	.+0      	; 0x232e <StackSize+0x6>
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    2332:	9a 83       	std	Y+2, r25	; 0x02
    2334:	89 83       	std	Y+1, r24	; 0x01
    return Ps->top;
    2336:	e9 81       	ldd	r30, Y+1	; 0x01
    2338:	fa 81       	ldd	r31, Y+2	; 0x02
    233a:	80 81       	ld	r24, Z
    233c:	91 81       	ldd	r25, Z+1	; 0x01
}
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	cf 91       	pop	r28
    2344:	df 91       	pop	r29
    2346:	08 95       	ret

00002348 <input>:
u8 Key =0;
u8 data[DATA_SIZE] = {'\0'};


//take input from keypad and if it isn't equal to'=' then store it in data array
void input(){
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62

	do
	{
		Keypad_u8GetPressedkey(&Key);
    2350:	8e e8       	ldi	r24, 0x8E	; 142
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	0e 94 2b 10 	call	0x2056	; 0x2056 <Keypad_u8GetPressedkey>
	}while( Key == NOT_PRESSED );
    2358:	80 91 8e 00 	lds	r24, 0x008E
    235c:	84 31       	cpi	r24, 0x14	; 20
    235e:	c1 f3       	breq	.-16     	; 0x2350 <input+0x8>
	LCD_enuDisplayChar(Key);
    2360:	80 91 8e 00 	lds	r24, 0x008E
    2364:	0e 94 30 0c 	call	0x1860	; 0x1860 <LCD_enuDisplayChar>

	if(Key!='=')
    2368:	80 91 8e 00 	lds	r24, 0x008E
    236c:	8d 33       	cpi	r24, 0x3D	; 61
    236e:	79 f0       	breq	.+30     	; 0x238e <input+0x46>
		data[pos++]=Key;
    2370:	80 91 8c 00 	lds	r24, 0x008C
    2374:	90 91 8d 00 	lds	r25, 0x008D
    2378:	20 91 8e 00 	lds	r18, 0x008E
    237c:	fc 01       	movw	r30, r24
    237e:	e1 57       	subi	r30, 0x71	; 113
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	20 83       	st	Z, r18
    2384:	01 96       	adiw	r24, 0x01	; 1
    2386:	90 93 8d 00 	sts	0x008D, r25
    238a:	80 93 8c 00 	sts	0x008C, r24
}
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	08 95       	ret

00002394 <calc>:


//calculate math expression entered by user
s16 calc( u8*data)
{
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
    239c:	cc 57       	subi	r28, 0x7C	; 124
    239e:	d0 40       	sbci	r29, 0x00	; 0
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	fe 01       	movw	r30, r28
    23ac:	e7 58       	subi	r30, 0x87	; 135
    23ae:	ff 4f       	sbci	r31, 0xFF	; 255
    23b0:	91 83       	std	Z+1, r25	; 0x01
    23b2:	80 83       	st	Z, r24
	result=0;
    23b4:	10 92 89 00 	sts	0x0089, r1
    23b8:	10 92 88 00 	sts	0x0088, r1
	s16 number = 0, j = 0;
    23bc:	1a 8e       	std	Y+26, r1	; 0x1a
    23be:	19 8e       	std	Y+25, r1	; 0x19
    23c0:	18 8e       	std	Y+24, r1	; 0x18
    23c2:	1f 8a       	std	Y+23, r1	; 0x17
	//Create stack used to store result of (* or \)operations and operands of(+ or -)operations
	Stack stack;
	CreateStack(&stack);
    23c4:	ce 01       	movw	r24, r28
    23c6:	4b 96       	adiw	r24, 0x1b	; 27
    23c8:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <CreateStack>
	//Create char array to store (+ or -) in expression and initialize it
	char operators[10] = {'\0'};
    23cc:	ce 01       	movw	r24, r28
    23ce:	8b 5b       	subi	r24, 0xBB	; 187
    23d0:	9f 4f       	sbci	r25, 0xFF	; 255
    23d2:	2a e0       	ldi	r18, 0x0A	; 10
    23d4:	fc 01       	movw	r30, r24
    23d6:	df 01       	movw	r26, r30
    23d8:	42 2f       	mov	r20, r18
    23da:	1d 92       	st	X+, r1
    23dc:	4a 95       	dec	r20
    23de:	e9 f7       	brne	.-6      	; 0x23da <calc+0x46>


	//loop on expression and finish (* or / ) operations and push its result in stack
	// if there is + or - add it to operations array
	// and push their operands in stack too
	for (u8 i = 0;   data[i] != '\0' ; i++)
    23e0:	1e 8a       	std	Y+22, r1	; 0x16
    23e2:	d1 c1       	rjmp	.+930    	; 0x2786 <calc+0x3f2>
	{
		// to take number consist of more than 1 digit
		if (is_digit(data[i])) {
    23e4:	8e 89       	ldd	r24, Y+22	; 0x16
    23e6:	28 2f       	mov	r18, r24
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	fe 01       	movw	r30, r28
    23ec:	e7 58       	subi	r30, 0x87	; 135
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	80 81       	ld	r24, Z
    23f2:	91 81       	ldd	r25, Z+1	; 0x01
    23f4:	fc 01       	movw	r30, r24
    23f6:	e2 0f       	add	r30, r18
    23f8:	f3 1f       	adc	r31, r19
    23fa:	80 81       	ld	r24, Z
    23fc:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <is_digit>
    2400:	88 23       	and	r24, r24
    2402:	01 f1       	breq	.+64     	; 0x2444 <calc+0xb0>
			number = number * 10 + (data[i] - '0');
    2404:	89 8d       	ldd	r24, Y+25	; 0x19
    2406:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2408:	9c 01       	movw	r18, r24
    240a:	22 0f       	add	r18, r18
    240c:	33 1f       	adc	r19, r19
    240e:	c9 01       	movw	r24, r18
    2410:	88 0f       	add	r24, r24
    2412:	99 1f       	adc	r25, r25
    2414:	88 0f       	add	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	a9 01       	movw	r20, r18
    241a:	48 0f       	add	r20, r24
    241c:	59 1f       	adc	r21, r25
    241e:	8e 89       	ldd	r24, Y+22	; 0x16
    2420:	28 2f       	mov	r18, r24
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	fe 01       	movw	r30, r28
    2426:	e7 58       	subi	r30, 0x87	; 135
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	80 81       	ld	r24, Z
    242c:	91 81       	ldd	r25, Z+1	; 0x01
    242e:	fc 01       	movw	r30, r24
    2430:	e2 0f       	add	r30, r18
    2432:	f3 1f       	adc	r31, r19
    2434:	80 81       	ld	r24, Z
    2436:	88 2f       	mov	r24, r24
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	c0 97       	sbiw	r24, 0x30	; 48
    243c:	84 0f       	add	r24, r20
    243e:	95 1f       	adc	r25, r21
    2440:	9a 8f       	std	Y+26, r25	; 0x1a
    2442:	89 8f       	std	Y+25, r24	; 0x19

		}

		if(! is_digit(data[i+1]) || data[i+1] == '\0'){
    2444:	8e 89       	ldd	r24, Y+22	; 0x16
    2446:	88 2f       	mov	r24, r24
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	9c 01       	movw	r18, r24
    244c:	2f 5f       	subi	r18, 0xFF	; 255
    244e:	3f 4f       	sbci	r19, 0xFF	; 255
    2450:	fe 01       	movw	r30, r28
    2452:	e7 58       	subi	r30, 0x87	; 135
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	80 81       	ld	r24, Z
    2458:	91 81       	ldd	r25, Z+1	; 0x01
    245a:	fc 01       	movw	r30, r24
    245c:	e2 0f       	add	r30, r18
    245e:	f3 1f       	adc	r31, r19
    2460:	80 81       	ld	r24, Z
    2462:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <is_digit>
    2466:	88 23       	and	r24, r24
    2468:	89 f0       	breq	.+34     	; 0x248c <calc+0xf8>
    246a:	8e 89       	ldd	r24, Y+22	; 0x16
    246c:	88 2f       	mov	r24, r24
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	9c 01       	movw	r18, r24
    2472:	2f 5f       	subi	r18, 0xFF	; 255
    2474:	3f 4f       	sbci	r19, 0xFF	; 255
    2476:	fe 01       	movw	r30, r28
    2478:	e7 58       	subi	r30, 0x87	; 135
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	80 81       	ld	r24, Z
    247e:	91 81       	ldd	r25, Z+1	; 0x01
    2480:	fc 01       	movw	r30, r24
    2482:	e2 0f       	add	r30, r18
    2484:	f3 1f       	adc	r31, r19
    2486:	80 81       	ld	r24, Z
    2488:	88 23       	and	r24, r24
    248a:	49 f4       	brne	.+18     	; 0x249e <calc+0x10a>

			Push(&stack,number);
    248c:	ce 01       	movw	r24, r28
    248e:	4b 96       	adiw	r24, 0x1b	; 27
    2490:	29 8d       	ldd	r18, Y+25	; 0x19
    2492:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2494:	b9 01       	movw	r22, r18
    2496:	0e 94 09 11 	call	0x2212	; 0x2212 <Push>
			number=0;
    249a:	1a 8e       	std	Y+26, r1	; 0x1a
    249c:	19 8e       	std	Y+25, r1	; 0x19
		}

		if(isOperator(data[i]) ){
    249e:	8e 89       	ldd	r24, Y+22	; 0x16
    24a0:	28 2f       	mov	r18, r24
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	fe 01       	movw	r30, r28
    24a6:	e7 58       	subi	r30, 0x87	; 135
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	80 81       	ld	r24, Z
    24ac:	91 81       	ldd	r25, Z+1	; 0x01
    24ae:	fc 01       	movw	r30, r24
    24b0:	e2 0f       	add	r30, r18
    24b2:	f3 1f       	adc	r31, r19
    24b4:	80 81       	ld	r24, Z
    24b6:	0e 94 23 15 	call	0x2a46	; 0x2a46 <isOperator>
    24ba:	88 23       	and	r24, r24
    24bc:	09 f4       	brne	.+2      	; 0x24c0 <calc+0x12c>
    24be:	60 c1       	rjmp	.+704    	; 0x2780 <calc+0x3ec>

			if (data[i] == '+' || data[i] == '-')
    24c0:	8e 89       	ldd	r24, Y+22	; 0x16
    24c2:	28 2f       	mov	r18, r24
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	fe 01       	movw	r30, r28
    24c8:	e7 58       	subi	r30, 0x87	; 135
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	80 81       	ld	r24, Z
    24ce:	91 81       	ldd	r25, Z+1	; 0x01
    24d0:	fc 01       	movw	r30, r24
    24d2:	e2 0f       	add	r30, r18
    24d4:	f3 1f       	adc	r31, r19
    24d6:	80 81       	ld	r24, Z
    24d8:	8b 32       	cpi	r24, 0x2B	; 43
    24da:	71 f0       	breq	.+28     	; 0x24f8 <calc+0x164>
    24dc:	8e 89       	ldd	r24, Y+22	; 0x16
    24de:	28 2f       	mov	r18, r24
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	fe 01       	movw	r30, r28
    24e4:	e7 58       	subi	r30, 0x87	; 135
    24e6:	ff 4f       	sbci	r31, 0xFF	; 255
    24e8:	80 81       	ld	r24, Z
    24ea:	91 81       	ldd	r25, Z+1	; 0x01
    24ec:	fc 01       	movw	r30, r24
    24ee:	e2 0f       	add	r30, r18
    24f0:	f3 1f       	adc	r31, r19
    24f2:	80 81       	ld	r24, Z
    24f4:	8d 32       	cpi	r24, 0x2D	; 45
    24f6:	d9 f4       	brne	.+54     	; 0x252e <calc+0x19a>
				operators[j++] = data[i];
    24f8:	4f 89       	ldd	r20, Y+23	; 0x17
    24fa:	58 8d       	ldd	r21, Y+24	; 0x18
    24fc:	8e 89       	ldd	r24, Y+22	; 0x16
    24fe:	28 2f       	mov	r18, r24
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	fe 01       	movw	r30, r28
    2504:	e7 58       	subi	r30, 0x87	; 135
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	80 81       	ld	r24, Z
    250a:	91 81       	ldd	r25, Z+1	; 0x01
    250c:	fc 01       	movw	r30, r24
    250e:	e2 0f       	add	r30, r18
    2510:	f3 1f       	adc	r31, r19
    2512:	20 81       	ld	r18, Z
    2514:	ce 01       	movw	r24, r28
    2516:	8b 5b       	subi	r24, 0xBB	; 187
    2518:	9f 4f       	sbci	r25, 0xFF	; 255
    251a:	fc 01       	movw	r30, r24
    251c:	e4 0f       	add	r30, r20
    251e:	f5 1f       	adc	r31, r21
    2520:	20 83       	st	Z, r18
    2522:	8f 89       	ldd	r24, Y+23	; 0x17
    2524:	98 8d       	ldd	r25, Y+24	; 0x18
    2526:	01 96       	adiw	r24, 0x01	; 1
    2528:	98 8f       	std	Y+24, r25	; 0x18
    252a:	8f 8b       	std	Y+23, r24	; 0x17
    252c:	29 c1       	rjmp	.+594    	; 0x2780 <calc+0x3ec>
			//if it is * operation pop last element in stack then (*) it and the next number to operator
			//then push result in stack again

			else if (data[i] == '*') {
    252e:	8e 89       	ldd	r24, Y+22	; 0x16
    2530:	28 2f       	mov	r18, r24
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	fe 01       	movw	r30, r28
    2536:	e7 58       	subi	r30, 0x87	; 135
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	80 81       	ld	r24, Z
    253c:	91 81       	ldd	r25, Z+1	; 0x01
    253e:	fc 01       	movw	r30, r24
    2540:	e2 0f       	add	r30, r18
    2542:	f3 1f       	adc	r31, r19
    2544:	80 81       	ld	r24, Z
    2546:	8a 32       	cpi	r24, 0x2A	; 42
    2548:	09 f0       	breq	.+2      	; 0x254c <calc+0x1b8>
    254a:	81 c0       	rjmp	.+258    	; 0x264e <calc+0x2ba>
				s16 temp=0,x=0,j=2;
    254c:	1d 8a       	std	Y+21, r1	; 0x15
    254e:	1c 8a       	std	Y+20, r1	; 0x14
    2550:	1b 8a       	std	Y+19, r1	; 0x13
    2552:	1a 8a       	std	Y+18, r1	; 0x12
    2554:	82 e0       	ldi	r24, 0x02	; 2
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	99 8b       	std	Y+17, r25	; 0x11
    255a:	88 8b       	std	Y+16, r24	; 0x10

				//if second operand of * consist of more than one digit
				x=(data[i+1]-'0');
    255c:	8e 89       	ldd	r24, Y+22	; 0x16
    255e:	88 2f       	mov	r24, r24
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	9c 01       	movw	r18, r24
    2564:	2f 5f       	subi	r18, 0xFF	; 255
    2566:	3f 4f       	sbci	r19, 0xFF	; 255
    2568:	fe 01       	movw	r30, r28
    256a:	e7 58       	subi	r30, 0x87	; 135
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	80 81       	ld	r24, Z
    2570:	91 81       	ldd	r25, Z+1	; 0x01
    2572:	fc 01       	movw	r30, r24
    2574:	e2 0f       	add	r30, r18
    2576:	f3 1f       	adc	r31, r19
    2578:	80 81       	ld	r24, Z
    257a:	88 2f       	mov	r24, r24
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	c0 97       	sbiw	r24, 0x30	; 48
    2580:	9b 8b       	std	Y+19, r25	; 0x13
    2582:	8a 8b       	std	Y+18, r24	; 0x12
    2584:	2a c0       	rjmp	.+84     	; 0x25da <calc+0x246>
				while(is_digit(data[i+j])){

					x = (x *10) + (data[i+j] - '0');
    2586:	8a 89       	ldd	r24, Y+18	; 0x12
    2588:	9b 89       	ldd	r25, Y+19	; 0x13
    258a:	9c 01       	movw	r18, r24
    258c:	22 0f       	add	r18, r18
    258e:	33 1f       	adc	r19, r19
    2590:	c9 01       	movw	r24, r18
    2592:	88 0f       	add	r24, r24
    2594:	99 1f       	adc	r25, r25
    2596:	88 0f       	add	r24, r24
    2598:	99 1f       	adc	r25, r25
    259a:	a9 01       	movw	r20, r18
    259c:	48 0f       	add	r20, r24
    259e:	59 1f       	adc	r21, r25
    25a0:	8e 89       	ldd	r24, Y+22	; 0x16
    25a2:	28 2f       	mov	r18, r24
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	88 89       	ldd	r24, Y+16	; 0x10
    25a8:	99 89       	ldd	r25, Y+17	; 0x11
    25aa:	82 0f       	add	r24, r18
    25ac:	93 1f       	adc	r25, r19
    25ae:	9c 01       	movw	r18, r24
    25b0:	fe 01       	movw	r30, r28
    25b2:	e7 58       	subi	r30, 0x87	; 135
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	80 81       	ld	r24, Z
    25b8:	91 81       	ldd	r25, Z+1	; 0x01
    25ba:	fc 01       	movw	r30, r24
    25bc:	e2 0f       	add	r30, r18
    25be:	f3 1f       	adc	r31, r19
    25c0:	80 81       	ld	r24, Z
    25c2:	88 2f       	mov	r24, r24
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	c0 97       	sbiw	r24, 0x30	; 48
    25c8:	84 0f       	add	r24, r20
    25ca:	95 1f       	adc	r25, r21
    25cc:	9b 8b       	std	Y+19, r25	; 0x13
    25ce:	8a 8b       	std	Y+18, r24	; 0x12
					j++;
    25d0:	88 89       	ldd	r24, Y+16	; 0x10
    25d2:	99 89       	ldd	r25, Y+17	; 0x11
    25d4:	01 96       	adiw	r24, 0x01	; 1
    25d6:	99 8b       	std	Y+17, r25	; 0x11
    25d8:	88 8b       	std	Y+16, r24	; 0x10
			else if (data[i] == '*') {
				s16 temp=0,x=0,j=2;

				//if second operand of * consist of more than one digit
				x=(data[i+1]-'0');
				while(is_digit(data[i+j])){
    25da:	8e 89       	ldd	r24, Y+22	; 0x16
    25dc:	28 2f       	mov	r18, r24
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	88 89       	ldd	r24, Y+16	; 0x10
    25e2:	99 89       	ldd	r25, Y+17	; 0x11
    25e4:	82 0f       	add	r24, r18
    25e6:	93 1f       	adc	r25, r19
    25e8:	9c 01       	movw	r18, r24
    25ea:	fe 01       	movw	r30, r28
    25ec:	e7 58       	subi	r30, 0x87	; 135
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	80 81       	ld	r24, Z
    25f2:	91 81       	ldd	r25, Z+1	; 0x01
    25f4:	fc 01       	movw	r30, r24
    25f6:	e2 0f       	add	r30, r18
    25f8:	f3 1f       	adc	r31, r19
    25fa:	80 81       	ld	r24, Z
    25fc:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <is_digit>
    2600:	88 23       	and	r24, r24
    2602:	09 f6       	brne	.-126    	; 0x2586 <calc+0x1f2>

					x = (x *10) + (data[i+j] - '0');
					j++;
				}
				i+=j-2;
    2604:	98 89       	ldd	r25, Y+16	; 0x10
    2606:	8e 89       	ldd	r24, Y+22	; 0x16
    2608:	89 0f       	add	r24, r25
    260a:	82 50       	subi	r24, 0x02	; 2
    260c:	8e 8b       	std	Y+22, r24	; 0x16

				temp = Stack_Top(&stack) * x;
    260e:	ce 01       	movw	r24, r28
    2610:	4b 96       	adiw	r24, 0x1b	; 27
    2612:	0e 94 79 11 	call	0x22f2	; 0x22f2 <Stack_Top>
    2616:	9c 01       	movw	r18, r24
    2618:	8a 89       	ldd	r24, Y+18	; 0x12
    261a:	9b 89       	ldd	r25, Y+19	; 0x13
    261c:	dc 01       	movw	r26, r24
    261e:	2a 9f       	mul	r18, r26
    2620:	c0 01       	movw	r24, r0
    2622:	2b 9f       	mul	r18, r27
    2624:	90 0d       	add	r25, r0
    2626:	3a 9f       	mul	r19, r26
    2628:	90 0d       	add	r25, r0
    262a:	11 24       	eor	r1, r1
    262c:	9d 8b       	std	Y+21, r25	; 0x15
    262e:	8c 8b       	std	Y+20, r24	; 0x14
				Pop(&stack);
    2630:	ce 01       	movw	r24, r28
    2632:	4b 96       	adiw	r24, 0x1b	; 27
    2634:	0e 94 33 11 	call	0x2266	; 0x2266 <Pop>
				Push(&stack, temp);
    2638:	ce 01       	movw	r24, r28
    263a:	4b 96       	adiw	r24, 0x1b	; 27
    263c:	2c 89       	ldd	r18, Y+20	; 0x14
    263e:	3d 89       	ldd	r19, Y+21	; 0x15
    2640:	b9 01       	movw	r22, r18
    2642:	0e 94 09 11 	call	0x2212	; 0x2212 <Push>
				i++;
    2646:	8e 89       	ldd	r24, Y+22	; 0x16
    2648:	8f 5f       	subi	r24, 0xFF	; 255
    264a:	8e 8b       	std	Y+22, r24	; 0x16
    264c:	99 c0       	rjmp	.+306    	; 0x2780 <calc+0x3ec>
			}

			//if it is / operation pop last element in stack then (/) it and the next number to operator
			//then push result in stack again
			else if (data[i] == '/') {
    264e:	8e 89       	ldd	r24, Y+22	; 0x16
    2650:	28 2f       	mov	r18, r24
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	fe 01       	movw	r30, r28
    2656:	e7 58       	subi	r30, 0x87	; 135
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	80 81       	ld	r24, Z
    265c:	91 81       	ldd	r25, Z+1	; 0x01
    265e:	fc 01       	movw	r30, r24
    2660:	e2 0f       	add	r30, r18
    2662:	f3 1f       	adc	r31, r19
    2664:	80 81       	ld	r24, Z
    2666:	8f 32       	cpi	r24, 0x2F	; 47
    2668:	09 f0       	breq	.+2      	; 0x266c <calc+0x2d8>
    266a:	8a c0       	rjmp	.+276    	; 0x2780 <calc+0x3ec>
				s16 temp=0,x=0,j=2;
    266c:	1f 86       	std	Y+15, r1	; 0x0f
    266e:	1e 86       	std	Y+14, r1	; 0x0e
    2670:	1d 86       	std	Y+13, r1	; 0x0d
    2672:	1c 86       	std	Y+12, r1	; 0x0c
    2674:	82 e0       	ldi	r24, 0x02	; 2
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	9b 87       	std	Y+11, r25	; 0x0b
    267a:	8a 87       	std	Y+10, r24	; 0x0a
				//if second operand of / consist of more than one digit
				x=(data[i+1]-'0');
    267c:	8e 89       	ldd	r24, Y+22	; 0x16
    267e:	88 2f       	mov	r24, r24
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	9c 01       	movw	r18, r24
    2684:	2f 5f       	subi	r18, 0xFF	; 255
    2686:	3f 4f       	sbci	r19, 0xFF	; 255
    2688:	fe 01       	movw	r30, r28
    268a:	e7 58       	subi	r30, 0x87	; 135
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	80 81       	ld	r24, Z
    2690:	91 81       	ldd	r25, Z+1	; 0x01
    2692:	fc 01       	movw	r30, r24
    2694:	e2 0f       	add	r30, r18
    2696:	f3 1f       	adc	r31, r19
    2698:	80 81       	ld	r24, Z
    269a:	88 2f       	mov	r24, r24
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	c0 97       	sbiw	r24, 0x30	; 48
    26a0:	9d 87       	std	Y+13, r25	; 0x0d
    26a2:	8c 87       	std	Y+12, r24	; 0x0c
    26a4:	2a c0       	rjmp	.+84     	; 0x26fa <calc+0x366>
				while(is_digit(data[i+j])){

					x = (x *10) + (data[i+j] - '0');
    26a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    26a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    26aa:	9c 01       	movw	r18, r24
    26ac:	22 0f       	add	r18, r18
    26ae:	33 1f       	adc	r19, r19
    26b0:	c9 01       	movw	r24, r18
    26b2:	88 0f       	add	r24, r24
    26b4:	99 1f       	adc	r25, r25
    26b6:	88 0f       	add	r24, r24
    26b8:	99 1f       	adc	r25, r25
    26ba:	a9 01       	movw	r20, r18
    26bc:	48 0f       	add	r20, r24
    26be:	59 1f       	adc	r21, r25
    26c0:	8e 89       	ldd	r24, Y+22	; 0x16
    26c2:	28 2f       	mov	r18, r24
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    26c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    26ca:	82 0f       	add	r24, r18
    26cc:	93 1f       	adc	r25, r19
    26ce:	9c 01       	movw	r18, r24
    26d0:	fe 01       	movw	r30, r28
    26d2:	e7 58       	subi	r30, 0x87	; 135
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	80 81       	ld	r24, Z
    26d8:	91 81       	ldd	r25, Z+1	; 0x01
    26da:	fc 01       	movw	r30, r24
    26dc:	e2 0f       	add	r30, r18
    26de:	f3 1f       	adc	r31, r19
    26e0:	80 81       	ld	r24, Z
    26e2:	88 2f       	mov	r24, r24
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	c0 97       	sbiw	r24, 0x30	; 48
    26e8:	84 0f       	add	r24, r20
    26ea:	95 1f       	adc	r25, r21
    26ec:	9d 87       	std	Y+13, r25	; 0x0d
    26ee:	8c 87       	std	Y+12, r24	; 0x0c
					j++;
    26f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    26f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    26f4:	01 96       	adiw	r24, 0x01	; 1
    26f6:	9b 87       	std	Y+11, r25	; 0x0b
    26f8:	8a 87       	std	Y+10, r24	; 0x0a
			//then push result in stack again
			else if (data[i] == '/') {
				s16 temp=0,x=0,j=2;
				//if second operand of / consist of more than one digit
				x=(data[i+1]-'0');
				while(is_digit(data[i+j])){
    26fa:	8e 89       	ldd	r24, Y+22	; 0x16
    26fc:	28 2f       	mov	r18, r24
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	8a 85       	ldd	r24, Y+10	; 0x0a
    2702:	9b 85       	ldd	r25, Y+11	; 0x0b
    2704:	82 0f       	add	r24, r18
    2706:	93 1f       	adc	r25, r19
    2708:	9c 01       	movw	r18, r24
    270a:	fe 01       	movw	r30, r28
    270c:	e7 58       	subi	r30, 0x87	; 135
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	80 81       	ld	r24, Z
    2712:	91 81       	ldd	r25, Z+1	; 0x01
    2714:	fc 01       	movw	r30, r24
    2716:	e2 0f       	add	r30, r18
    2718:	f3 1f       	adc	r31, r19
    271a:	80 81       	ld	r24, Z
    271c:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <is_digit>
    2720:	88 23       	and	r24, r24
    2722:	09 f6       	brne	.-126    	; 0x26a6 <calc+0x312>

					x = (x *10) + (data[i+j] - '0');
					j++;
				}
				i+=j-2;
    2724:	9a 85       	ldd	r25, Y+10	; 0x0a
    2726:	8e 89       	ldd	r24, Y+22	; 0x16
    2728:	89 0f       	add	r24, r25
    272a:	82 50       	subi	r24, 0x02	; 2
    272c:	8e 8b       	std	Y+22, r24	; 0x16
				//detect if 2nd operand equals to 0 set error flag to 1
				if(x == 0){
    272e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2730:	9d 85       	ldd	r25, Y+13	; 0x0d
    2732:	00 97       	sbiw	r24, 0x00	; 0
    2734:	59 f4       	brne	.+22     	; 0x274c <calc+0x3b8>
					error = 1;
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	90 93 8b 00 	sts	0x008B, r25
    273e:	80 93 8a 00 	sts	0x008A, r24
					return 0;
    2742:	ed 96       	adiw	r28, 0x3d	; 61
    2744:	1f ae       	std	Y+63, r1	; 0x3f
    2746:	1e ae       	std	Y+62, r1	; 0x3e
    2748:	ed 97       	sbiw	r28, 0x3d	; 61
    274a:	e5 c0       	rjmp	.+458    	; 0x2916 <calc+0x582>
				}
				//if it'snot zero do devision and push result in stack
				temp = Stack_Top(&stack) / x;
    274c:	ce 01       	movw	r24, r28
    274e:	4b 96       	adiw	r24, 0x1b	; 27
    2750:	0e 94 79 11 	call	0x22f2	; 0x22f2 <Stack_Top>
    2754:	2c 85       	ldd	r18, Y+12	; 0x0c
    2756:	3d 85       	ldd	r19, Y+13	; 0x0d
    2758:	b9 01       	movw	r22, r18
    275a:	0e 94 90 15 	call	0x2b20	; 0x2b20 <__divmodhi4>
    275e:	cb 01       	movw	r24, r22
    2760:	9f 87       	std	Y+15, r25	; 0x0f
    2762:	8e 87       	std	Y+14, r24	; 0x0e
				Pop(&stack);
    2764:	ce 01       	movw	r24, r28
    2766:	4b 96       	adiw	r24, 0x1b	; 27
    2768:	0e 94 33 11 	call	0x2266	; 0x2266 <Pop>
				Push(&stack, temp);
    276c:	ce 01       	movw	r24, r28
    276e:	4b 96       	adiw	r24, 0x1b	; 27
    2770:	2e 85       	ldd	r18, Y+14	; 0x0e
    2772:	3f 85       	ldd	r19, Y+15	; 0x0f
    2774:	b9 01       	movw	r22, r18
    2776:	0e 94 09 11 	call	0x2212	; 0x2212 <Push>
				i++;
    277a:	8e 89       	ldd	r24, Y+22	; 0x16
    277c:	8f 5f       	subi	r24, 0xFF	; 255
    277e:	8e 8b       	std	Y+22, r24	; 0x16


	//loop on expression and finish (* or / ) operations and push its result in stack
	// if there is + or - add it to operations array
	// and push their operands in stack too
	for (u8 i = 0;   data[i] != '\0' ; i++)
    2780:	8e 89       	ldd	r24, Y+22	; 0x16
    2782:	8f 5f       	subi	r24, 0xFF	; 255
    2784:	8e 8b       	std	Y+22, r24	; 0x16
    2786:	8e 89       	ldd	r24, Y+22	; 0x16
    2788:	28 2f       	mov	r18, r24
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	fe 01       	movw	r30, r28
    278e:	e7 58       	subi	r30, 0x87	; 135
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	80 81       	ld	r24, Z
    2794:	91 81       	ldd	r25, Z+1	; 0x01
    2796:	fc 01       	movw	r30, r24
    2798:	e2 0f       	add	r30, r18
    279a:	f3 1f       	adc	r31, r19
    279c:	80 81       	ld	r24, Z
    279e:	88 23       	and	r24, r24
    27a0:	09 f0       	breq	.+2      	; 0x27a4 <calc+0x410>
    27a2:	20 ce       	rjmp	.-960    	; 0x23e4 <calc+0x50>
	}

	//reverse stack to match sequence of operators stored in operators array

	Stack reversed;
	CreateStack(&reversed);
    27a4:	ce 01       	movw	r24, r28
    27a6:	81 5b       	subi	r24, 0xB1	; 177
    27a8:	9f 4f       	sbci	r25, 0xFF	; 255
    27aa:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <CreateStack>
    27ae:	0f c0       	rjmp	.+30     	; 0x27ce <calc+0x43a>
	while(!Stack_Empty(&stack)) {

		Push(&reversed, Stack_Top(&stack));
    27b0:	ce 01       	movw	r24, r28
    27b2:	4b 96       	adiw	r24, 0x1b	; 27
    27b4:	0e 94 79 11 	call	0x22f2	; 0x22f2 <Stack_Top>
    27b8:	9c 01       	movw	r18, r24
    27ba:	ce 01       	movw	r24, r28
    27bc:	81 5b       	subi	r24, 0xB1	; 177
    27be:	9f 4f       	sbci	r25, 0xFF	; 255
    27c0:	b9 01       	movw	r22, r18
    27c2:	0e 94 09 11 	call	0x2212	; 0x2212 <Push>
		Pop(&stack);
    27c6:	ce 01       	movw	r24, r28
    27c8:	4b 96       	adiw	r24, 0x1b	; 27
    27ca:	0e 94 33 11 	call	0x2266	; 0x2266 <Pop>

	//reverse stack to match sequence of operators stored in operators array

	Stack reversed;
	CreateStack(&reversed);
	while(!Stack_Empty(&stack)) {
    27ce:	ce 01       	movw	r24, r28
    27d0:	4b 96       	adiw	r24, 0x1b	; 27
    27d2:	0e 94 48 11 	call	0x2290	; 0x2290 <Stack_Empty>
    27d6:	88 23       	and	r24, r24
    27d8:	59 f3       	breq	.-42     	; 0x27b0 <calc+0x41c>
		Pop(&stack);
	}

	//finish (+ or -) operations and push result in stack again

	if (operators[0] != '\0') {
    27da:	fe 01       	movw	r30, r28
    27dc:	eb 5b       	subi	r30, 0xBB	; 187
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	80 81       	ld	r24, Z
    27e2:	88 23       	and	r24, r24
    27e4:	09 f4       	brne	.+2      	; 0x27e8 <calc+0x454>
    27e6:	88 c0       	rjmp	.+272    	; 0x28f8 <calc+0x564>
		for (u8 i = 0;  operators[i] != '\0' ; i++) {
    27e8:	19 86       	std	Y+9, r1	; 0x09
    27ea:	63 c0       	rjmp	.+198    	; 0x28b2 <calc+0x51e>
			if (operators[i] == '+') {
    27ec:	89 85       	ldd	r24, Y+9	; 0x09
    27ee:	28 2f       	mov	r18, r24
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	ce 01       	movw	r24, r28
    27f4:	8b 5b       	subi	r24, 0xBB	; 187
    27f6:	9f 4f       	sbci	r25, 0xFF	; 255
    27f8:	fc 01       	movw	r30, r24
    27fa:	e2 0f       	add	r30, r18
    27fc:	f3 1f       	adc	r31, r19
    27fe:	80 81       	ld	r24, Z
    2800:	8b 32       	cpi	r24, 0x2B	; 43
    2802:	21 f5       	brne	.+72     	; 0x284c <calc+0x4b8>
				s16 x = Stack_Top(&reversed);
    2804:	ce 01       	movw	r24, r28
    2806:	81 5b       	subi	r24, 0xB1	; 177
    2808:	9f 4f       	sbci	r25, 0xFF	; 255
    280a:	0e 94 79 11 	call	0x22f2	; 0x22f2 <Stack_Top>
    280e:	98 87       	std	Y+8, r25	; 0x08
    2810:	8f 83       	std	Y+7, r24	; 0x07
				Pop(&reversed);
    2812:	ce 01       	movw	r24, r28
    2814:	81 5b       	subi	r24, 0xB1	; 177
    2816:	9f 4f       	sbci	r25, 0xFF	; 255
    2818:	0e 94 33 11 	call	0x2266	; 0x2266 <Pop>
				s16 y = Stack_Top(&reversed);
    281c:	ce 01       	movw	r24, r28
    281e:	81 5b       	subi	r24, 0xB1	; 177
    2820:	9f 4f       	sbci	r25, 0xFF	; 255
    2822:	0e 94 79 11 	call	0x22f2	; 0x22f2 <Stack_Top>
    2826:	9e 83       	std	Y+6, r25	; 0x06
    2828:	8d 83       	std	Y+5, r24	; 0x05
				Pop(&reversed);
    282a:	ce 01       	movw	r24, r28
    282c:	81 5b       	subi	r24, 0xB1	; 177
    282e:	9f 4f       	sbci	r25, 0xFF	; 255
    2830:	0e 94 33 11 	call	0x2266	; 0x2266 <Pop>
				Push(&reversed, x + y);
    2834:	2f 81       	ldd	r18, Y+7	; 0x07
    2836:	38 85       	ldd	r19, Y+8	; 0x08
    2838:	8d 81       	ldd	r24, Y+5	; 0x05
    283a:	9e 81       	ldd	r25, Y+6	; 0x06
    283c:	28 0f       	add	r18, r24
    283e:	39 1f       	adc	r19, r25
    2840:	ce 01       	movw	r24, r28
    2842:	81 5b       	subi	r24, 0xB1	; 177
    2844:	9f 4f       	sbci	r25, 0xFF	; 255
    2846:	b9 01       	movw	r22, r18
    2848:	0e 94 09 11 	call	0x2212	; 0x2212 <Push>
			}
			if (operators[i] == '-') {
    284c:	89 85       	ldd	r24, Y+9	; 0x09
    284e:	28 2f       	mov	r18, r24
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	ce 01       	movw	r24, r28
    2854:	8b 5b       	subi	r24, 0xBB	; 187
    2856:	9f 4f       	sbci	r25, 0xFF	; 255
    2858:	fc 01       	movw	r30, r24
    285a:	e2 0f       	add	r30, r18
    285c:	f3 1f       	adc	r31, r19
    285e:	80 81       	ld	r24, Z
    2860:	8d 32       	cpi	r24, 0x2D	; 45
    2862:	21 f5       	brne	.+72     	; 0x28ac <calc+0x518>
				s16 x = Stack_Top(&reversed);
    2864:	ce 01       	movw	r24, r28
    2866:	81 5b       	subi	r24, 0xB1	; 177
    2868:	9f 4f       	sbci	r25, 0xFF	; 255
    286a:	0e 94 79 11 	call	0x22f2	; 0x22f2 <Stack_Top>
    286e:	9c 83       	std	Y+4, r25	; 0x04
    2870:	8b 83       	std	Y+3, r24	; 0x03
				Pop(&reversed);
    2872:	ce 01       	movw	r24, r28
    2874:	81 5b       	subi	r24, 0xB1	; 177
    2876:	9f 4f       	sbci	r25, 0xFF	; 255
    2878:	0e 94 33 11 	call	0x2266	; 0x2266 <Pop>
				s16 y = Stack_Top(&reversed);
    287c:	ce 01       	movw	r24, r28
    287e:	81 5b       	subi	r24, 0xB1	; 177
    2880:	9f 4f       	sbci	r25, 0xFF	; 255
    2882:	0e 94 79 11 	call	0x22f2	; 0x22f2 <Stack_Top>
    2886:	9a 83       	std	Y+2, r25	; 0x02
    2888:	89 83       	std	Y+1, r24	; 0x01
				Pop(&reversed);
    288a:	ce 01       	movw	r24, r28
    288c:	81 5b       	subi	r24, 0xB1	; 177
    288e:	9f 4f       	sbci	r25, 0xFF	; 255
    2890:	0e 94 33 11 	call	0x2266	; 0x2266 <Pop>
				Push(&reversed, (x-y));
    2894:	2b 81       	ldd	r18, Y+3	; 0x03
    2896:	3c 81       	ldd	r19, Y+4	; 0x04
    2898:	89 81       	ldd	r24, Y+1	; 0x01
    289a:	9a 81       	ldd	r25, Y+2	; 0x02
    289c:	28 1b       	sub	r18, r24
    289e:	39 0b       	sbc	r19, r25
    28a0:	ce 01       	movw	r24, r28
    28a2:	81 5b       	subi	r24, 0xB1	; 177
    28a4:	9f 4f       	sbci	r25, 0xFF	; 255
    28a6:	b9 01       	movw	r22, r18
    28a8:	0e 94 09 11 	call	0x2212	; 0x2212 <Push>
	}

	//finish (+ or -) operations and push result in stack again

	if (operators[0] != '\0') {
		for (u8 i = 0;  operators[i] != '\0' ; i++) {
    28ac:	89 85       	ldd	r24, Y+9	; 0x09
    28ae:	8f 5f       	subi	r24, 0xFF	; 255
    28b0:	89 87       	std	Y+9, r24	; 0x09
    28b2:	89 85       	ldd	r24, Y+9	; 0x09
    28b4:	28 2f       	mov	r18, r24
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	ce 01       	movw	r24, r28
    28ba:	8b 5b       	subi	r24, 0xBB	; 187
    28bc:	9f 4f       	sbci	r25, 0xFF	; 255
    28be:	fc 01       	movw	r30, r24
    28c0:	e2 0f       	add	r30, r18
    28c2:	f3 1f       	adc	r31, r19
    28c4:	80 81       	ld	r24, Z
    28c6:	88 23       	and	r24, r24
    28c8:	09 f0       	breq	.+2      	; 0x28cc <calc+0x538>
    28ca:	90 cf       	rjmp	.-224    	; 0x27ec <calc+0x458>
    28cc:	15 c0       	rjmp	.+42     	; 0x28f8 <calc+0x564>
			}
		}
	}
	// pop remaining elements in stack(add them to result variable)
	while (StackSize(&reversed) > 0) {
		result += Stack_Top(&reversed);
    28ce:	ce 01       	movw	r24, r28
    28d0:	81 5b       	subi	r24, 0xB1	; 177
    28d2:	9f 4f       	sbci	r25, 0xFF	; 255
    28d4:	0e 94 79 11 	call	0x22f2	; 0x22f2 <Stack_Top>
    28d8:	9c 01       	movw	r18, r24
    28da:	80 91 88 00 	lds	r24, 0x0088
    28de:	90 91 89 00 	lds	r25, 0x0089
    28e2:	82 0f       	add	r24, r18
    28e4:	93 1f       	adc	r25, r19
    28e6:	90 93 89 00 	sts	0x0089, r25
    28ea:	80 93 88 00 	sts	0x0088, r24
		Pop(&reversed);
    28ee:	ce 01       	movw	r24, r28
    28f0:	81 5b       	subi	r24, 0xB1	; 177
    28f2:	9f 4f       	sbci	r25, 0xFF	; 255
    28f4:	0e 94 33 11 	call	0x2266	; 0x2266 <Pop>
				Push(&reversed, (x-y));
			}
		}
	}
	// pop remaining elements in stack(add them to result variable)
	while (StackSize(&reversed) > 0) {
    28f8:	ce 01       	movw	r24, r28
    28fa:	81 5b       	subi	r24, 0xB1	; 177
    28fc:	9f 4f       	sbci	r25, 0xFF	; 255
    28fe:	0e 94 94 11 	call	0x2328	; 0x2328 <StackSize>
    2902:	88 23       	and	r24, r24
    2904:	21 f7       	brne	.-56     	; 0x28ce <calc+0x53a>
		result += Stack_Top(&reversed);
		Pop(&reversed);
	}


	return result;
    2906:	40 91 88 00 	lds	r20, 0x0088
    290a:	50 91 89 00 	lds	r21, 0x0089
    290e:	ed 96       	adiw	r28, 0x3d	; 61
    2910:	5f af       	std	Y+63, r21	; 0x3f
    2912:	4e af       	std	Y+62, r20	; 0x3e
    2914:	ed 97       	sbiw	r28, 0x3d	; 61
    2916:	ed 96       	adiw	r28, 0x3d	; 61
    2918:	8e ad       	ldd	r24, Y+62	; 0x3e
    291a:	9f ad       	ldd	r25, Y+63	; 0x3f
    291c:	ed 97       	sbiw	r28, 0x3d	; 61

}
    291e:	c4 58       	subi	r28, 0x84	; 132
    2920:	df 4f       	sbci	r29, 0xFF	; 255
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	f8 94       	cli
    2926:	de bf       	out	0x3e, r29	; 62
    2928:	0f be       	out	0x3f, r0	; 63
    292a:	cd bf       	out	0x3d, r28	; 61
    292c:	cf 91       	pop	r28
    292e:	df 91       	pop	r29
    2930:	08 95       	ret

00002932 <process>:



//process function manages operations due to key pressed
void process(){
    2932:	df 93       	push	r29
    2934:	cf 93       	push	r28
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62

	// if key pressed is equal to on/c clear display and reset data for next operation
	if (Key == 'C')
    293a:	80 91 8e 00 	lds	r24, 0x008E
    293e:	83 34       	cpi	r24, 0x43	; 67
    2940:	39 f4       	brne	.+14     	; 0x2950 <process+0x1e>
	{
		reset_data(data);
    2942:	8f e8       	ldi	r24, 0x8F	; 143
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	0e 94 ee 14 	call	0x29dc	; 0x29dc <reset_data>
		Clear_display();
    294a:	0e 94 19 15 	call	0x2a32	; 0x2a32 <Clear_display>
    294e:	43 c0       	rjmp	.+134    	; 0x29d6 <process+0xa4>
	}
	// if key pressed is equal to = call calc function and display result of current expression
	else if (Key == '=')
    2950:	80 91 8e 00 	lds	r24, 0x008E
    2954:	8d 33       	cpi	r24, 0x3D	; 61
    2956:	09 f0       	breq	.+2      	; 0x295a <process+0x28>
    2958:	3e c0       	rjmp	.+124    	; 0x29d6 <process+0xa4>
	{
		result = calc(data);
    295a:	8f e8       	ldi	r24, 0x8F	; 143
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	0e 94 ca 11 	call	0x2394	; 0x2394 <calc>
    2962:	90 93 89 00 	sts	0x0089, r25
    2966:	80 93 88 00 	sts	0x0088, r24
		LCD_enuSendCommand(0xC0);
    296a:	80 ec       	ldi	r24, 0xC0	; 192
    296c:	0e 94 45 0c 	call	0x188a	; 0x188a <LCD_enuSendCommand>
		//check error flag if it's 0 then display result
		if(error ==0){
    2970:	80 91 8a 00 	lds	r24, 0x008A
    2974:	90 91 8b 00 	lds	r25, 0x008B
    2978:	00 97       	sbiw	r24, 0x00	; 0
    297a:	b9 f4       	brne	.+46     	; 0x29aa <process+0x78>
			if(result == 0)
    297c:	80 91 88 00 	lds	r24, 0x0088
    2980:	90 91 89 00 	lds	r25, 0x0089
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	21 f4       	brne	.+8      	; 0x2990 <process+0x5e>
				LCD_enuDisplayChar('0');
    2988:	80 e3       	ldi	r24, 0x30	; 48
    298a:	0e 94 30 0c 	call	0x1860	; 0x1860 <LCD_enuDisplayChar>
    298e:	1f c0       	rjmp	.+62     	; 0x29ce <process+0x9c>
			else
				LCD_enuDisplayIntegerNum(result);
    2990:	80 91 88 00 	lds	r24, 0x0088
    2994:	90 91 89 00 	lds	r25, 0x0089
    2998:	aa 27       	eor	r26, r26
    299a:	97 fd       	sbrc	r25, 7
    299c:	a0 95       	com	r26
    299e:	ba 2f       	mov	r27, r26
    29a0:	bc 01       	movw	r22, r24
    29a2:	cd 01       	movw	r24, r26
    29a4:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <LCD_enuDisplayIntegerNum>
    29a8:	12 c0       	rjmp	.+36     	; 0x29ce <process+0x9c>
		}
		//if error flag == 1 it indicates devision by 0
		// so display error message
		else
		{
			LCD_enuDisplayChar('E');
    29aa:	85 e4       	ldi	r24, 0x45	; 69
    29ac:	0e 94 30 0c 	call	0x1860	; 0x1860 <LCD_enuDisplayChar>
			LCD_enuDisplayChar('R');
    29b0:	82 e5       	ldi	r24, 0x52	; 82
    29b2:	0e 94 30 0c 	call	0x1860	; 0x1860 <LCD_enuDisplayChar>
			LCD_enuDisplayChar('R');
    29b6:	82 e5       	ldi	r24, 0x52	; 82
    29b8:	0e 94 30 0c 	call	0x1860	; 0x1860 <LCD_enuDisplayChar>
			LCD_enuDisplayChar('O');
    29bc:	8f e4       	ldi	r24, 0x4F	; 79
    29be:	0e 94 30 0c 	call	0x1860	; 0x1860 <LCD_enuDisplayChar>
			LCD_enuDisplayChar('R');
    29c2:	82 e5       	ldi	r24, 0x52	; 82
    29c4:	0e 94 30 0c 	call	0x1860	; 0x1860 <LCD_enuDisplayChar>
			LCD_enuDisplayChar('!');
    29c8:	81 e2       	ldi	r24, 0x21	; 33
    29ca:	0e 94 30 0c 	call	0x1860	; 0x1860 <LCD_enuDisplayChar>
		}

		reset_data(data);
    29ce:	8f e8       	ldi	r24, 0x8F	; 143
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	0e 94 ee 14 	call	0x29dc	; 0x29dc <reset_data>
	}

}
    29d6:	cf 91       	pop	r28
    29d8:	df 91       	pop	r29
    29da:	08 95       	ret

000029dc <reset_data>:


//after finishing any expression reset data for next one
void reset_data(u8* data){
    29dc:	df 93       	push	r29
    29de:	cf 93       	push	r28
    29e0:	00 d0       	rcall	.+0      	; 0x29e2 <reset_data+0x6>
    29e2:	0f 92       	push	r0
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
    29e8:	9b 83       	std	Y+3, r25	; 0x03
    29ea:	8a 83       	std	Y+2, r24	; 0x02

	result = 0;
    29ec:	10 92 89 00 	sts	0x0089, r1
    29f0:	10 92 88 00 	sts	0x0088, r1
	error = 0;
    29f4:	10 92 8b 00 	sts	0x008B, r1
    29f8:	10 92 8a 00 	sts	0x008A, r1
	pos = 0;
    29fc:	10 92 8d 00 	sts	0x008D, r1
    2a00:	10 92 8c 00 	sts	0x008C, r1
	// loop on data array and assign each element to '\0'
	for(u8 i=0;i<DATA_SIZE;i++)
    2a04:	19 82       	std	Y+1, r1	; 0x01
    2a06:	0c c0       	rjmp	.+24     	; 0x2a20 <reset_data+0x44>
		data[i]='\0';
    2a08:	89 81       	ldd	r24, Y+1	; 0x01
    2a0a:	28 2f       	mov	r18, r24
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a10:	9b 81       	ldd	r25, Y+3	; 0x03
    2a12:	fc 01       	movw	r30, r24
    2a14:	e2 0f       	add	r30, r18
    2a16:	f3 1f       	adc	r31, r19
    2a18:	10 82       	st	Z, r1

	result = 0;
	error = 0;
	pos = 0;
	// loop on data array and assign each element to '\0'
	for(u8 i=0;i<DATA_SIZE;i++)
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	8f 5f       	subi	r24, 0xFF	; 255
    2a1e:	89 83       	std	Y+1, r24	; 0x01
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	8f 30       	cpi	r24, 0x0F	; 15
    2a24:	88 f3       	brcs	.-30     	; 0x2a08 <reset_data+0x2c>
		data[i]='\0';

}
    2a26:	0f 90       	pop	r0
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	cf 91       	pop	r28
    2a2e:	df 91       	pop	r29
    2a30:	08 95       	ret

00002a32 <Clear_display>:


void Clear_display(){
    2a32:	df 93       	push	r29
    2a34:	cf 93       	push	r28
    2a36:	cd b7       	in	r28, 0x3d	; 61
    2a38:	de b7       	in	r29, 0x3e	; 62

	LCD_enuSendCommand(0x01);
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	0e 94 45 0c 	call	0x188a	; 0x188a <LCD_enuSendCommand>
}
    2a40:	cf 91       	pop	r28
    2a42:	df 91       	pop	r29
    2a44:	08 95       	ret

00002a46 <isOperator>:


u8 isOperator(u8 ch){
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	00 d0       	rcall	.+0      	; 0x2a4c <isOperator+0x6>
    2a4c:	0f 92       	push	r0
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
    2a52:	89 83       	std	Y+1, r24	; 0x01

	return (ch == '+' || ch == '-' || ch == '*' || ch == '/'
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	8b 32       	cpi	r24, 0x2B	; 43
    2a58:	61 f0       	breq	.+24     	; 0x2a72 <isOperator+0x2c>
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	8d 32       	cpi	r24, 0x2D	; 45
    2a5e:	49 f0       	breq	.+18     	; 0x2a72 <isOperator+0x2c>
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	8a 32       	cpi	r24, 0x2A	; 42
    2a64:	31 f0       	breq	.+12     	; 0x2a72 <isOperator+0x2c>
    2a66:	89 81       	ldd	r24, Y+1	; 0x01
    2a68:	8f 32       	cpi	r24, 0x2F	; 47
    2a6a:	19 f0       	breq	.+6      	; 0x2a72 <isOperator+0x2c>
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	8e 35       	cpi	r24, 0x5E	; 94
    2a70:	29 f4       	brne	.+10     	; 0x2a7c <isOperator+0x36>
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	9b 83       	std	Y+3, r25	; 0x03
    2a78:	8a 83       	std	Y+2, r24	; 0x02
    2a7a:	02 c0       	rjmp	.+4      	; 0x2a80 <isOperator+0x3a>
    2a7c:	1b 82       	std	Y+3, r1	; 0x03
    2a7e:	1a 82       	std	Y+2, r1	; 0x02
    2a80:	8a 81       	ldd	r24, Y+2	; 0x02
			|| ch == '^');
}
    2a82:	0f 90       	pop	r0
    2a84:	0f 90       	pop	r0
    2a86:	0f 90       	pop	r0
    2a88:	cf 91       	pop	r28
    2a8a:	df 91       	pop	r29
    2a8c:	08 95       	ret

00002a8e <is_digit>:




u8 is_digit(u8 x){
    2a8e:	df 93       	push	r29
    2a90:	cf 93       	push	r28
    2a92:	00 d0       	rcall	.+0      	; 0x2a94 <is_digit+0x6>
    2a94:	0f 92       	push	r0
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
    2a9a:	89 83       	std	Y+1, r24	; 0x01

	return (x>='0' && x<='9');
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
    2a9e:	80 33       	cpi	r24, 0x30	; 48
    2aa0:	40 f0       	brcs	.+16     	; 0x2ab2 <is_digit+0x24>
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
    2aa4:	8a 33       	cpi	r24, 0x3A	; 58
    2aa6:	28 f4       	brcc	.+10     	; 0x2ab2 <is_digit+0x24>
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	9b 83       	std	Y+3, r25	; 0x03
    2aae:	8a 83       	std	Y+2, r24	; 0x02
    2ab0:	02 c0       	rjmp	.+4      	; 0x2ab6 <is_digit+0x28>
    2ab2:	1b 82       	std	Y+3, r1	; 0x03
    2ab4:	1a 82       	std	Y+2, r1	; 0x02
    2ab6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2ab8:	0f 90       	pop	r0
    2aba:	0f 90       	pop	r0
    2abc:	0f 90       	pop	r0
    2abe:	cf 91       	pop	r28
    2ac0:	df 91       	pop	r29
    2ac2:	08 95       	ret

00002ac4 <main>:
//#include "HAL/Keypad/Keypad_interface.h"
#include "Claculator.h"



int main() {
    2ac4:	df 93       	push	r29
    2ac6:	cf 93       	push	r28
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62

	DIO_enuInit();
    2acc:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_enuInit>
		Keypad_enuInit();
    2ad0:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <Keypad_enuInit>
		LCD_enuInit();
    2ad4:	0e 94 10 0a 	call	0x1420	; 0x1420 <LCD_enuInit>
	while (1) {

		input();
    2ad8:	0e 94 a4 11 	call	0x2348	; 0x2348 <input>
				process();
    2adc:	0e 94 99 14 	call	0x2932	; 0x2932 <process>
    2ae0:	fb cf       	rjmp	.-10     	; 0x2ad8 <main+0x14>

00002ae2 <__mulsi3>:
    2ae2:	62 9f       	mul	r22, r18
    2ae4:	d0 01       	movw	r26, r0
    2ae6:	73 9f       	mul	r23, r19
    2ae8:	f0 01       	movw	r30, r0
    2aea:	82 9f       	mul	r24, r18
    2aec:	e0 0d       	add	r30, r0
    2aee:	f1 1d       	adc	r31, r1
    2af0:	64 9f       	mul	r22, r20
    2af2:	e0 0d       	add	r30, r0
    2af4:	f1 1d       	adc	r31, r1
    2af6:	92 9f       	mul	r25, r18
    2af8:	f0 0d       	add	r31, r0
    2afa:	83 9f       	mul	r24, r19
    2afc:	f0 0d       	add	r31, r0
    2afe:	74 9f       	mul	r23, r20
    2b00:	f0 0d       	add	r31, r0
    2b02:	65 9f       	mul	r22, r21
    2b04:	f0 0d       	add	r31, r0
    2b06:	99 27       	eor	r25, r25
    2b08:	72 9f       	mul	r23, r18
    2b0a:	b0 0d       	add	r27, r0
    2b0c:	e1 1d       	adc	r30, r1
    2b0e:	f9 1f       	adc	r31, r25
    2b10:	63 9f       	mul	r22, r19
    2b12:	b0 0d       	add	r27, r0
    2b14:	e1 1d       	adc	r30, r1
    2b16:	f9 1f       	adc	r31, r25
    2b18:	bd 01       	movw	r22, r26
    2b1a:	cf 01       	movw	r24, r30
    2b1c:	11 24       	eor	r1, r1
    2b1e:	08 95       	ret

00002b20 <__divmodhi4>:
    2b20:	97 fb       	bst	r25, 7
    2b22:	09 2e       	mov	r0, r25
    2b24:	07 26       	eor	r0, r23
    2b26:	0a d0       	rcall	.+20     	; 0x2b3c <__divmodhi4_neg1>
    2b28:	77 fd       	sbrc	r23, 7
    2b2a:	04 d0       	rcall	.+8      	; 0x2b34 <__divmodhi4_neg2>
    2b2c:	27 d0       	rcall	.+78     	; 0x2b7c <__udivmodhi4>
    2b2e:	06 d0       	rcall	.+12     	; 0x2b3c <__divmodhi4_neg1>
    2b30:	00 20       	and	r0, r0
    2b32:	1a f4       	brpl	.+6      	; 0x2b3a <__divmodhi4_exit>

00002b34 <__divmodhi4_neg2>:
    2b34:	70 95       	com	r23
    2b36:	61 95       	neg	r22
    2b38:	7f 4f       	sbci	r23, 0xFF	; 255

00002b3a <__divmodhi4_exit>:
    2b3a:	08 95       	ret

00002b3c <__divmodhi4_neg1>:
    2b3c:	f6 f7       	brtc	.-4      	; 0x2b3a <__divmodhi4_exit>
    2b3e:	90 95       	com	r25
    2b40:	81 95       	neg	r24
    2b42:	9f 4f       	sbci	r25, 0xFF	; 255
    2b44:	08 95       	ret

00002b46 <__divmodsi4>:
    2b46:	97 fb       	bst	r25, 7
    2b48:	09 2e       	mov	r0, r25
    2b4a:	05 26       	eor	r0, r21
    2b4c:	0e d0       	rcall	.+28     	; 0x2b6a <__divmodsi4_neg1>
    2b4e:	57 fd       	sbrc	r21, 7
    2b50:	04 d0       	rcall	.+8      	; 0x2b5a <__divmodsi4_neg2>
    2b52:	28 d0       	rcall	.+80     	; 0x2ba4 <__udivmodsi4>
    2b54:	0a d0       	rcall	.+20     	; 0x2b6a <__divmodsi4_neg1>
    2b56:	00 1c       	adc	r0, r0
    2b58:	38 f4       	brcc	.+14     	; 0x2b68 <__divmodsi4_exit>

00002b5a <__divmodsi4_neg2>:
    2b5a:	50 95       	com	r21
    2b5c:	40 95       	com	r20
    2b5e:	30 95       	com	r19
    2b60:	21 95       	neg	r18
    2b62:	3f 4f       	sbci	r19, 0xFF	; 255
    2b64:	4f 4f       	sbci	r20, 0xFF	; 255
    2b66:	5f 4f       	sbci	r21, 0xFF	; 255

00002b68 <__divmodsi4_exit>:
    2b68:	08 95       	ret

00002b6a <__divmodsi4_neg1>:
    2b6a:	f6 f7       	brtc	.-4      	; 0x2b68 <__divmodsi4_exit>
    2b6c:	90 95       	com	r25
    2b6e:	80 95       	com	r24
    2b70:	70 95       	com	r23
    2b72:	61 95       	neg	r22
    2b74:	7f 4f       	sbci	r23, 0xFF	; 255
    2b76:	8f 4f       	sbci	r24, 0xFF	; 255
    2b78:	9f 4f       	sbci	r25, 0xFF	; 255
    2b7a:	08 95       	ret

00002b7c <__udivmodhi4>:
    2b7c:	aa 1b       	sub	r26, r26
    2b7e:	bb 1b       	sub	r27, r27
    2b80:	51 e1       	ldi	r21, 0x11	; 17
    2b82:	07 c0       	rjmp	.+14     	; 0x2b92 <__udivmodhi4_ep>

00002b84 <__udivmodhi4_loop>:
    2b84:	aa 1f       	adc	r26, r26
    2b86:	bb 1f       	adc	r27, r27
    2b88:	a6 17       	cp	r26, r22
    2b8a:	b7 07       	cpc	r27, r23
    2b8c:	10 f0       	brcs	.+4      	; 0x2b92 <__udivmodhi4_ep>
    2b8e:	a6 1b       	sub	r26, r22
    2b90:	b7 0b       	sbc	r27, r23

00002b92 <__udivmodhi4_ep>:
    2b92:	88 1f       	adc	r24, r24
    2b94:	99 1f       	adc	r25, r25
    2b96:	5a 95       	dec	r21
    2b98:	a9 f7       	brne	.-22     	; 0x2b84 <__udivmodhi4_loop>
    2b9a:	80 95       	com	r24
    2b9c:	90 95       	com	r25
    2b9e:	bc 01       	movw	r22, r24
    2ba0:	cd 01       	movw	r24, r26
    2ba2:	08 95       	ret

00002ba4 <__udivmodsi4>:
    2ba4:	a1 e2       	ldi	r26, 0x21	; 33
    2ba6:	1a 2e       	mov	r1, r26
    2ba8:	aa 1b       	sub	r26, r26
    2baa:	bb 1b       	sub	r27, r27
    2bac:	fd 01       	movw	r30, r26
    2bae:	0d c0       	rjmp	.+26     	; 0x2bca <__udivmodsi4_ep>

00002bb0 <__udivmodsi4_loop>:
    2bb0:	aa 1f       	adc	r26, r26
    2bb2:	bb 1f       	adc	r27, r27
    2bb4:	ee 1f       	adc	r30, r30
    2bb6:	ff 1f       	adc	r31, r31
    2bb8:	a2 17       	cp	r26, r18
    2bba:	b3 07       	cpc	r27, r19
    2bbc:	e4 07       	cpc	r30, r20
    2bbe:	f5 07       	cpc	r31, r21
    2bc0:	20 f0       	brcs	.+8      	; 0x2bca <__udivmodsi4_ep>
    2bc2:	a2 1b       	sub	r26, r18
    2bc4:	b3 0b       	sbc	r27, r19
    2bc6:	e4 0b       	sbc	r30, r20
    2bc8:	f5 0b       	sbc	r31, r21

00002bca <__udivmodsi4_ep>:
    2bca:	66 1f       	adc	r22, r22
    2bcc:	77 1f       	adc	r23, r23
    2bce:	88 1f       	adc	r24, r24
    2bd0:	99 1f       	adc	r25, r25
    2bd2:	1a 94       	dec	r1
    2bd4:	69 f7       	brne	.-38     	; 0x2bb0 <__udivmodsi4_loop>
    2bd6:	60 95       	com	r22
    2bd8:	70 95       	com	r23
    2bda:	80 95       	com	r24
    2bdc:	90 95       	com	r25
    2bde:	9b 01       	movw	r18, r22
    2be0:	ac 01       	movw	r20, r24
    2be2:	bd 01       	movw	r22, r26
    2be4:	cf 01       	movw	r24, r30
    2be6:	08 95       	ret

00002be8 <__prologue_saves__>:
    2be8:	2f 92       	push	r2
    2bea:	3f 92       	push	r3
    2bec:	4f 92       	push	r4
    2bee:	5f 92       	push	r5
    2bf0:	6f 92       	push	r6
    2bf2:	7f 92       	push	r7
    2bf4:	8f 92       	push	r8
    2bf6:	9f 92       	push	r9
    2bf8:	af 92       	push	r10
    2bfa:	bf 92       	push	r11
    2bfc:	cf 92       	push	r12
    2bfe:	df 92       	push	r13
    2c00:	ef 92       	push	r14
    2c02:	ff 92       	push	r15
    2c04:	0f 93       	push	r16
    2c06:	1f 93       	push	r17
    2c08:	cf 93       	push	r28
    2c0a:	df 93       	push	r29
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
    2c10:	ca 1b       	sub	r28, r26
    2c12:	db 0b       	sbc	r29, r27
    2c14:	0f b6       	in	r0, 0x3f	; 63
    2c16:	f8 94       	cli
    2c18:	de bf       	out	0x3e, r29	; 62
    2c1a:	0f be       	out	0x3f, r0	; 63
    2c1c:	cd bf       	out	0x3d, r28	; 61
    2c1e:	09 94       	ijmp

00002c20 <__epilogue_restores__>:
    2c20:	2a 88       	ldd	r2, Y+18	; 0x12
    2c22:	39 88       	ldd	r3, Y+17	; 0x11
    2c24:	48 88       	ldd	r4, Y+16	; 0x10
    2c26:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c28:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c2a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c2c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c2e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c30:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c32:	b9 84       	ldd	r11, Y+9	; 0x09
    2c34:	c8 84       	ldd	r12, Y+8	; 0x08
    2c36:	df 80       	ldd	r13, Y+7	; 0x07
    2c38:	ee 80       	ldd	r14, Y+6	; 0x06
    2c3a:	fd 80       	ldd	r15, Y+5	; 0x05
    2c3c:	0c 81       	ldd	r16, Y+4	; 0x04
    2c3e:	1b 81       	ldd	r17, Y+3	; 0x03
    2c40:	aa 81       	ldd	r26, Y+2	; 0x02
    2c42:	b9 81       	ldd	r27, Y+1	; 0x01
    2c44:	ce 0f       	add	r28, r30
    2c46:	d1 1d       	adc	r29, r1
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	f8 94       	cli
    2c4c:	de bf       	out	0x3e, r29	; 62
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	cd bf       	out	0x3d, r28	; 61
    2c52:	ed 01       	movw	r28, r26
    2c54:	08 95       	ret

00002c56 <_exit>:
    2c56:	f8 94       	cli

00002c58 <__stop_program>:
    2c58:	ff cf       	rjmp	.-2      	; 0x2c58 <__stop_program>
